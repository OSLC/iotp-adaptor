// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.ibm.oslc.adaptor.iotp.resources.Oslc_bmxDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_bmxDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.CFService;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.Discussion;
import com.ibm.oslc.adaptor.iotp.resources.Flow;

// Start of user code imports
import com.ibm.oslc.adaptor.bmx.impl.NodeREDApplication;
import com.ibm.oslc.adaptor.iotp.servlet.ServiceProviderCatalogSingleton;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import com.ibm.oslc.adaptor.iotp.BmxServiceProviderInfo;// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_bmxDomainConstants.NODEREDAPP_NAMESPACE)
@OslcName(Oslc_bmxDomainConstants.NODEREDAPP_LOCALNAME)
@OslcResourceShape(title = "NodeREDApp Resource Shape", describes = Oslc_bmxDomainConstants.NODEREDAPP_TYPE)
public class NodeREDApp
    extends App
    implements INodeREDApp
{
    // Start of user code attributeAnnotation:flows
    // End of user code
    private HashSet<Link> flows = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    public NodeREDApp(HttpServletRequest httpServletRequest, BmxServiceProviderInfo info, NodeREDApplication app) throws URISyntaxException {
		super();
		setTitle(app.getName());
		setShortTitle(app.getName());
		setIdentifier(app.getGuid());
		getTypes().add(new URI(Oslc_bmxDomainConstants.NODEREDAPP_TYPE));
		// This is so RDNG, RTC and RQM can link to this resource. Its like a linkable marker type
		getTypes().add(new URI("http://open-services.net/ns/cm#ChangeRequest"));		
		getTypes().add(new URI("http://open-services.net/ns/rm#Requirement"));		

	
		// Note that there must be a service provider since we are creating an instance of an resource
		// Therefore there will be no need to refresh the catalog
		ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getIotpServiceProvider(httpServletRequest, info.bmxId);
		HashSet<URI> serviceProviders = new HashSet<URI>();
		serviceProviders.add(serviceProvider.getAbout());
		setServiceProvider(serviceProviders);
		setAbout(constructURI(info.bmxId, app.getGuid()));
		setCreated(app.getMetadata().created_at);
		setModified(app.getMetadata().updated_at);
		try {
			setInstanceShape(createResourceShape().getAbout());
		} catch (OslcCoreApplicationException e) {
		}
	}
    // End of user code
    public NodeREDApp()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public NodeREDApp(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public NodeREDApp(final String bmxId, final String nodeREDAppId)
           throws URISyntaxException
    {
        this (constructURI(bmxId, nodeREDAppId));
        // Start of user code constructor3
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static URI constructURI(final String bmxId, final String nodeREDAppId)
    {
        String basePath = OSLC4JUtils.getServletURI();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        pathParameters.put("bmxId", bmxId);
        pathParameters.put("nodeREDAppId", nodeREDAppId);
        String instanceURI = "bmx/{bmxId}/resources/nodeREDApps/{nodeREDAppId}";
    
        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String bmxId, final String nodeREDAppId , final String label)
    {
        return new Link(constructURI(bmxId, nodeREDAppId), label);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String bmxId, final String nodeREDAppId)
    {
        return new Link(constructURI(bmxId, nodeREDAppId));
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_bmxDomainConstants.NODEREDAPP_PATH,
        NodeREDApp.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local NodeREDApp Resource} - update NodeREDApp.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addFlows(final Link flows)
    {
        this.flows.add(flows);
    }
    
    
    // Start of user code getterAnnotation:flows
    // End of user code
    @OslcName("flows")
    @OslcPropertyDefinition(Oslc_bmxDomainConstants.BLUEMIX_NAMSPACE + "flows")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_bmxDomainConstants.FLOW_TYPE})
    @OslcReadOnly(false)
    @OslcTitle("flows")
    public HashSet<Link> getFlows()
    {
        // Start of user code getterInit:flows
        // End of user code
        return flows;
    }
    
    
    // Start of user code setterAnnotation:flows
    // End of user code
    public void setFlows(final HashSet<Link> flows )
    {
        // Start of user code setterInit:flows
        // End of user code
        this.flows.clear();
        if (flows != null)
        {
            this.flows.addAll(flows);
        }
    
        // Start of user code setterFinalize:flows
        // End of user code
    }
    
    
    static public String flowsToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:flowsToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"flows\">flows: </LABEL>";
    
        // Start of user code "Mid:flowsToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:flowsToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String flowsToHtml()
    {
        String s = "";
    
        // Start of user code flowstoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : flows) {
                s = s + "<li>";
                s = s + (new Flow (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code flowstoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
