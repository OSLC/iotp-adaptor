// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.ibm.oslc.adaptor.iotp.servlet.ServiceProviderCatalogSingleton;
import com.ibm.oslc.adaptor.iotp.IotpServiceProviderInfo;
import com.ibm.oslc.adaptor.iotp.BmxServiceProviderInfo;
import com.ibm.oslc.adaptor.iotp.resources.App;
import com.ibm.oslc.adaptor.iotp.resources.CFService;
import com.ibm.oslc.adaptor.iotp.resources.ChangeRequest;
import com.ibm.oslc.adaptor.iotp.resources.Device;
import com.ibm.oslc.adaptor.iotp.resources.DeviceInfo;
import com.ibm.oslc.adaptor.iotp.resources.DeviceType;
import com.ibm.oslc.adaptor.iotp.resources.DeviceTypeMapping;
import com.ibm.oslc.adaptor.iotp.resources.Discussion;
import com.ibm.oslc.adaptor.iotp.resources.EventType;
import com.ibm.oslc.adaptor.iotp.resources.Flow;
import com.ibm.oslc.adaptor.iotp.resources.LogicalInterface;
import com.ibm.oslc.adaptor.iotp.resources.MetaData;
import com.ibm.oslc.adaptor.iotp.resources.MetaProperty;
import com.ibm.oslc.adaptor.iotp.resources.NodeREDApp;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.PhysicalInterface;
import com.ibm.oslc.adaptor.iotp.resources.Requirement;
import com.ibm.oslc.adaptor.iotp.resources.Resource;
import com.ibm.oslc.adaptor.iotp.resources.Rule;
import com.ibm.oslc.adaptor.iotp.resources.Schema;
import com.ibm.oslc.adaptor.iotp.resources.Space;
import com.ibm.oslc.adaptor.iotp.resources.Thing;
import com.ibm.oslc.adaptor.iotp.resources.ThingType;
import com.ibm.oslc.adaptor.iotp.resources.ThingTypeMapping;


// Start of user code imports
import com.ibm.oslc.adaptor.iotp.impl.IoTAPIImplementation;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.ibm.oslc.adaptor.iotp.impl.IoTPClient;
import java.util.ArrayList;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;
import com.ibm.oslc.adaptor.bmx.BluemixClient;
import com.ibm.oslc.adaptor.bmx.NodeREDApplication;
import java.util.regex.PatternSyntaxException;
// End of user code

// Start of user code pre_class_code
// End of user code

public class CE4IoTConnectorManager {

    // Start of user code class_attributes
	public static final String REALM = "IoTPlatform";
    // End of user code
    
    
    // Start of user code class_methods
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener
        // TODO Implement code to establish connection to data backbone etc ...
        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed
        // TODO Implement code to shutdown connections to data backbone etc...
        // End of user code
    }

    public static IotpServiceProviderInfo[] getIotpServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        IotpServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "IotpServiceProviderInfo[] getIotpServiceProviderInfos(...)"
        try {
			serviceProviderInfos = IoTAPIImplementation.getIotpServiceProviderInfos(httpServletRequest);
		} catch (KeyManagementException | NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
        // End of user code
        return serviceProviderInfos;
    }
    public static BmxServiceProviderInfo[] getBmxServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        BmxServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "BmxServiceProviderInfo[] getBmxServiceProviderInfos(...)"
        try {
			serviceProviderInfos = IoTAPIImplementation.getBmxServiceProviderInfos(httpServletRequest);
		} catch (KeyManagementException | NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
        // End of user code
        return serviceProviderInfos;
    }

    public static List<EventType> queryEventTypes(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<EventType> resources = null;
        
        // Start of user code queryEventTypes
        resources = new ArrayList<EventType>(0);
        // End of user code
        return resources;
    }
    public static List<DeviceType> queryDeviceTypes(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<DeviceType> resources = null;
        
        // Start of user code queryDeviceTypes
		try {
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types";
			JsonObject result = client.readIoTResource(info.name, uri).getAsJsonObject();
			JsonArray results = result.getAsJsonArray("results");
			resources = new ArrayList<DeviceType>(results.size());
			for (int i = 0; i < results.size(); i++) {
				JsonObject obj = results.get(i).getAsJsonObject();

				DeviceType deviceType = new DeviceType(httpServletRequest, info, obj.get("id").getAsString(),  obj);
				// Note: toString() methods are used to display the resource in the selection dialog, so we use that here.
				// This will generally be the dcterms:label
				// Handle dangling meta char '*' for user convenience
				if (where == null || where.equals("") || where.equals("*")) where = ".*";
				if (deviceType.toString().matches(where)) resources.add(deviceType);
			}
		} catch (PatternSyntaxException e) { 
    		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		} 
        // End of user code
        return resources;
    }
    public static List<PhysicalInterface> queryPhysicalInterfaces(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<PhysicalInterface> resources = null;
        
        // Start of user code queryPhysicalInterfaces
        resources = new ArrayList<PhysicalInterface>(0);
        // End of user code
        return resources;
    }
    public static List<Rule> queryRules(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<Rule> resources = null;
        
        // Start of user code queryRules
        // TODO Implement code to return a set of resources
        resources = new ArrayList<Rule>(0);
        // End of user code
        return resources;
    }
    public static List<Schema> querySchemas(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<Schema> resources = null;
        
        // Start of user code querySchemas
        resources = new ArrayList<Schema>(0);
        // End of user code
        return resources;
    }
    public static List<ThingType> queryThingTypes(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<ThingType> resources = null;
        
        // Start of user code queryThingTypes
        resources = new ArrayList<ThingType>(0);
        // End of user code
        return resources;
    }
    public static List<LogicalInterface> queryLogicalInterfaces(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<LogicalInterface> resources = null;
        
        // Start of user code queryLogicalInterfaces
        resources = new ArrayList<LogicalInterface>(0);
        // End of user code
        return resources;
    }
    public static List<Device> queryDevices(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<Device> resources = null;
        
        // Start of user code queryDevices
		try {
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			List<DeviceType> deviceTypes = queryDeviceTypes(httpServletRequest, iotId, where, page, limit);
			resources = new ArrayList<Device>();
			for (DeviceType deviceType : deviceTypes) {
				String typeId = deviceType.getIdentifier();
				String uri = "device/types/" + typeId + "/devices" ;
				JsonObject result = client.readIoTResource(info.name, uri).getAsJsonObject();
				JsonArray results = result.getAsJsonArray("results");
				for (int i = 0; i < results.size(); i++) {
					JsonObject obj = results.get(i).getAsJsonObject();
	
					Device device = new Device(httpServletRequest, info, typeId, obj.get("deviceId").getAsString(),  obj);
					// Note: toString() methods are used to display the resource in the selection dialog, so we use that here.
					// This will generally be the dcterms:label
					// Handle dangling meta char '*' for user convenience
					if (where == null || where.equals("") || where.equals("*")) where = ".*";
					if (device.toString().matches(where)) resources.add(device);
				}
			}
		} catch (PatternSyntaxException e) { 
    		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		} 
        // End of user code
        return resources;
    }
    public static List<Thing> queryThings(HttpServletRequest httpServletRequest, final String iotId, String where, int page, int limit)
    {
        List<Thing> resources = null;
        
        // Start of user code queryThings
        // TODO Implement code to return a set of resources
        // End of user code
        return resources;
    }
    public static List<AbstractResource> RequirementAndChangeRequestAndResourceSelector(HttpServletRequest httpServletRequest, final String iotId, String terms)   
    {
        List<AbstractResource> resources = null;
        
        // Start of user code RequirementAndChangeRequestAndResourceSelector
		try {
            String resourceType = httpServletRequest.getParameter("type");
            if (resourceType == null) resourceType = "devicetype";
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			resources = new ArrayList<AbstractResource>();
			if (resourceType.equals("devicetype")) resources.addAll(queryDeviceTypes(httpServletRequest, iotId, terms, 1, 10000));
			if (resourceType.equals("device")) resources.addAll(queryDevices(httpServletRequest, info.iotId, terms, 1, 10000));				
			if (resourceType.equals("thingtype")) resources.addAll(queryThingTypes(httpServletRequest, info.iotId, terms, 1, 10000));
			if (resourceType.equals("rule")) resources.addAll(queryRules(httpServletRequest, info.iotId, terms, 1, 10000));
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return resources;
    }
    public static Rule createRule(HttpServletRequest httpServletRequest, final Rule aResource, final String iotId)
    {
        Rule newResource = null;
        
        // Start of user code createRule
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static EventType createEventType(HttpServletRequest httpServletRequest, final EventType aResource, final String iotId)
    {
        EventType newResource = null;
        
        // Start of user code createEventType
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static PhysicalInterface createPhysicalInterface(HttpServletRequest httpServletRequest, final PhysicalInterface aResource, final String iotId)
    {
        PhysicalInterface newResource = null;
        
        // Start of user code createPhysicalInterface
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static Schema createSchema(HttpServletRequest httpServletRequest, final Schema aResource, final String iotId)
    {
        Schema newResource = null;
        
        // Start of user code createSchema
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static ThingType createThingType(HttpServletRequest httpServletRequest, final ThingType aResource, final String iotId)
    {
        ThingType newResource = null;
        
        // Start of user code createThingType
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static DeviceType createDeviceType(HttpServletRequest httpServletRequest, final DeviceType aResource, final String iotId)
    {
        DeviceType newResource = null;
        
        // Start of user code createDeviceType
		try {
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types";
			// Create the JSon Element representing the device.
			JsonObject json = aResource.toJson().getAsJsonObject();
			// Remove any properties that can't be assigned in case they were copied from another resource
			json.remove("createdDateTime");
			json.remove("updatedDateTime");

			// Convert the result back
			JsonElement result = client.createIoTResource(info.name, uri, json);
			if (result != null) newResource = new DeviceType(httpServletRequest, info, aResource.getIdentifier(), result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return newResource;
    }
    public static LogicalInterface createLogicalInterface(HttpServletRequest httpServletRequest, final LogicalInterface aResource, final String iotId)
    {
        LogicalInterface newResource = null;
        
        // Start of user code createLogicalInterface
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static Thing createThing(HttpServletRequest httpServletRequest, final Thing aResource, final String iotId)
    {
        Thing newResource = null;
        
        // Start of user code createThing
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }
    public static Device createDevice(HttpServletRequest httpServletRequest, final Device aResource, final String iotId)
    {
        Device newResource = null;
        
        // Start of user code createDevice
		try {
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + aResource.getTypeId() + "/devices";
			// Create the JSon Element representing the device.
			JsonObject json = aResource.toJson().getAsJsonObject();
			// Remove any properties that can't be assigned in case they were copied from another resource
			json.addProperty("authToken", httpServletRequest.getParameter("authToken"));
			json.remove("typeId");
			json.remove("createdDateTime");
			json.remove("updatedDateTime");

			// Convert the result back
			JsonElement result = client.createIoTResource(info.name, uri, json);
			if (result != null) newResource = new Device(httpServletRequest, info, aResource.getTypeId(), aResource.getIdentifier(), result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return newResource;
    }

    public static AbstractResource createResourceAndChangeRequestAndRequirement(HttpServletRequest httpServletRequest, final AbstractResource aResource, final String iotId)
    {
        AbstractResource newResource = null;
        
        // Start of user code createResourceAndChangeRequestAndRequirement
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }

    public static DeviceType getDeviceType(HttpServletRequest httpServletRequest, final String iotId, final String deviceTypeId)
    {
        DeviceType aResource = null;
        
        // Start of user code getDeviceType
		try {
			if (deviceTypeId == null) {
				throw new Exception("Device ID must not be null");
			}
			final IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + deviceTypeId;
			JsonElement result = client.readIoTResource(info.name, uri);
			if (result != null) aResource = new DeviceType(httpServletRequest, info, deviceTypeId, result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return aResource;
    }
    public static Rule getRule(HttpServletRequest httpServletRequest, final String iotId, final String ruleId)
    {
        Rule aResource = null;
        
        // Start of user code getRule
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }
    public static LogicalInterface getLogicalInterface(HttpServletRequest httpServletRequest, final String iotId, final String logicalInterfaceId)
    {
        LogicalInterface aResource = null;
        
        // Start of user code getLogicalInterface
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }
    public static EventType getEventType(HttpServletRequest httpServletRequest, final String iotId, final String eventTypeId)
    {
        EventType aResource = null;
        
        // Start of user code getEventType
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }
    public static PhysicalInterface getPhysicalInterface(HttpServletRequest httpServletRequest, final String iotId, final String physicalInterfaceId)
    {
        PhysicalInterface aResource = null;
        
        // Start of user code getPhysicalInterface
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }
    public static Schema getSchema(HttpServletRequest httpServletRequest, final String iotId, final String schemaId)
    {
        Schema aResource = null;
        
        // Start of user code getSchema
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }
    public static ThingType getThingType(HttpServletRequest httpServletRequest, final String iotId, final String thingTypeId)
    {
        ThingType aResource = null;
        
        // Start of user code getThingType
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }

    public static Boolean deleteDeviceType(HttpServletRequest httpServletRequest, final String iotId, final String deviceTypeId)
    {
        Boolean deleted = false;
        // Start of user code deleteDeviceType
		try {
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + deviceTypeId;
			deleted = client.deleteIoTResource(info.name, uri);
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return deleted;
    }
    public static Boolean deleteRule(HttpServletRequest httpServletRequest, final String iotId, final String ruleId)
    {
        Boolean deleted = false;
        // Start of user code deleteRule
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deleteLogicalInterface(HttpServletRequest httpServletRequest, final String iotId, final String logicalInterfaceId)
    {
        Boolean deleted = false;
        // Start of user code deleteLogicalInterface
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deleteEventType(HttpServletRequest httpServletRequest, final String iotId, final String eventTypeId)
    {
        Boolean deleted = false;
        // Start of user code deleteEventType
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deletePhysicalInterface(HttpServletRequest httpServletRequest, final String iotId, final String physicalInterfaceId)
    {
        Boolean deleted = false;
        // Start of user code deletePhysicalInterface
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deleteSchema(HttpServletRequest httpServletRequest, final String iotId, final String schemaId)
    {
        Boolean deleted = false;
        // Start of user code deleteSchema
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deleteThingType(HttpServletRequest httpServletRequest, final String iotId, final String thingTypeId)
    {
        Boolean deleted = false;
        // Start of user code deleteThingType
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }

    public static DeviceType updateDeviceType(HttpServletRequest httpServletRequest, final DeviceType aResource, final String iotId, final String deviceTypeId) {
        DeviceType updatedResource = null;
        // Start of user code updateDeviceType
		try {
			// RQM attempts to set the backlink without a properly constructed resource, ignore this since we can't store any links
			if (aResource.getIdentifier() == null) return aResource;
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + deviceTypeId;
			JsonObject json = aResource.toJson().getAsJsonObject();
			// Remove the properties that can't be updated
			json.remove("id");
			json.remove("classId");
			json.remove("createdDateTime");
			json.remove("updatedDateTime");
			JsonElement result = client.updateIoTResource(info.name, uri, json);
			if (result != null) updatedResource = new DeviceType(httpServletRequest, info, aResource.getIdentifier(), result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return updatedResource;
    }
    public static Rule updateRule(HttpServletRequest httpServletRequest, final Rule aResource, final String iotId, final String ruleId) {
        Rule updatedResource = null;
        // Start of user code updateRule
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static LogicalInterface updateLogicalInterface(HttpServletRequest httpServletRequest, final LogicalInterface aResource, final String iotId, final String logicalInterfaceId) {
        LogicalInterface updatedResource = null;
        // Start of user code updateLogicalInterface
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static EventType updateEventType(HttpServletRequest httpServletRequest, final EventType aResource, final String iotId, final String eventTypeId) {
        EventType updatedResource = null;
        // Start of user code updateEventType
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static PhysicalInterface updatePhysicalInterface(HttpServletRequest httpServletRequest, final PhysicalInterface aResource, final String iotId, final String physicalInterfaceId) {
        PhysicalInterface updatedResource = null;
        // Start of user code updatePhysicalInterface
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static Schema updateSchema(HttpServletRequest httpServletRequest, final Schema aResource, final String iotId, final String schemaId) {
        Schema updatedResource = null;
        // Start of user code updateSchema
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static ThingType updateThingType(HttpServletRequest httpServletRequest, final ThingType aResource, final String iotId, final String thingTypeId) {
        ThingType updatedResource = null;
        // Start of user code updateThingType
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static Device getDevice(HttpServletRequest httpServletRequest, final String iotId, final String typeId, final String deviceId)
    {
        Device aResource = null;
        
        // Start of user code getDevice
		try {
			if (deviceId == null) {
				throw new Exception("Device ID must not be null");
			}
			final IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + typeId + "/devices/" + deviceId;
			JsonElement result = client.readIoTResource(info.name, uri);
			if (result != null) aResource = new Device(httpServletRequest, info, typeId, deviceId, result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return aResource;
    }

    public static Boolean deleteDevice(HttpServletRequest httpServletRequest, final String iotId, final String typeId, final String deviceId)
    {
        Boolean deleted = false;
        // Start of user code deleteDevice
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }

    public static Device updateDevice(HttpServletRequest httpServletRequest, final Device aResource, final String iotId, final String typeId, final String deviceId) {
        Device updatedResource = null;
        // Start of user code updateDevice
		try {
			// RQM attempts to set the backlink without a properly constructed resource, ignore this since we can't store any links
			if (aResource.getIdentifier() == null) return aResource;
			IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
			IoTPClient client = (IoTPClient)httpServletRequest.getSession().getAttribute(IoTPClient.IOTPCLIENT_ATTRIBUTE);
			String uri = "device/types/" + aResource.getTypeId() + "/devices/" + aResource.getIdentifier();
			JsonObject json = aResource.toJson().getAsJsonObject();
			// Remove the properties that can't be updated
			json.remove("id");
			json.remove("typeid");
			json.remove("classId");
			json.remove("createdDateTime");
			json.remove("updatedDateTime");
			JsonElement result = client.updateIoTResource(info.name, uri, json);
			if (result != null) updatedResource = new Device(httpServletRequest, info, aResource.getTypeId(), aResource.getIdentifier(), result.getAsJsonObject());
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
		}
        // End of user code
        return updatedResource;
    }

    public static List<Space> querySpaces(HttpServletRequest httpServletRequest, final String bmxId, String where, int page, int limit)
    {
        List<Space> resources = null;
        
        // Start of user code querySpaces
        try {
            BmxServiceProviderInfo info = IoTAPIImplementation.getBmxServiceProviderInfo(httpServletRequest, bmxId);
            BluemixClient client = (BluemixClient)httpServletRequest.getSession().getAttribute(BluemixClient.BMXCLIENT_ATTRIBUTE);
            ArrayList<com.ibm.oslc.adaptor.bmx.Space> spaces = client.getSpaces(info.bmxOrg);
            resources = new ArrayList<Space>(spaces.size());
            for (com.ibm.oslc.adaptor.bmx.Space space : spaces) {
                    Space bmxSpace = new Space(httpServletRequest, info, space);
                    resources.add(bmxSpace);
            }
	    } catch (Exception e) {
	            e.printStackTrace();
	            throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
	    }
        // End of user code
        return resources;
    }
    public static List<NodeREDApp> queryNodeREDApps(HttpServletRequest httpServletRequest, final String bmxId, String where, int page, int limit)
    {
        List<NodeREDApp> resources = null;
        
        // Start of user code queryNodeREDApps
        resources = new ArrayList<NodeREDApp>();  // always return at least an empty array
        
		// ignore RDNG and other apps that do references queries instead of storing backlinks, we can't have any references
		if (where != null && where.contains("dcterms:references")) return resources;
        try {
            BmxServiceProviderInfo info = IoTAPIImplementation.getBmxServiceProviderInfo(httpServletRequest, bmxId);
            BluemixClient client = (BluemixClient)httpServletRequest.getSession().getAttribute(BluemixClient.BMXCLIENT_ATTRIBUTE);
            // Get the flows for all spaces
            ArrayList<com.ibm.oslc.adaptor.bmx.Space> spaces = client.getSpaces(info.bmxOrg);
            for (com.ibm.oslc.adaptor.bmx.Space space : spaces) {
	            ArrayList<NodeREDApplication> apps = client.getNodeREDApplications(space);
	            for (NodeREDApplication app : apps) {
	            		NodeREDApp iotApp = new NodeREDApp(httpServletRequest, info, app);
	            		// Provide a convenient default for selection dialogs
	    				if (where == null || where.equals("") || where.equals("*")) where = ".*";
	    				if (iotApp.toString().matches(where)) resources.add(iotApp);
	            }
            }
	    } catch (Exception e) {
	            e.printStackTrace();
	            throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
	    }
        // End of user code
        return resources;
    }
    public static List<AbstractResource> NodeREDAppAndChangeRequestAndRequirementSelector(HttpServletRequest httpServletRequest, final String bmxId, String terms)   
    {
        List<AbstractResource> resources = null;
        
        // Start of user code NodeREDAppAndChangeRequestAndRequirementSelector
        List<NodeREDApp> apps = queryNodeREDApps(httpServletRequest, bmxId, terms, 1, 1000);
        resources = new ArrayList<AbstractResource>(apps.size());
        resources.addAll(apps);
        // End of user code
        return resources;
    }


    public static Space getSpace(HttpServletRequest httpServletRequest, final String bmxId, final String spaceId)
    {
        Space aResource = null;
        
        // Start of user code getSpace
        try {
            if (spaceId == null) {
                    throw new Exception("Device ID must not be null");
            }
            final BmxServiceProviderInfo info = IoTAPIImplementation.getBmxServiceProviderInfo(httpServletRequest, bmxId);
            BluemixClient client = (BluemixClient)httpServletRequest.getSession().getAttribute(BluemixClient.BMXCLIENT_ATTRIBUTE);
            com.ibm.oslc.adaptor.bmx.Space space = client.getSpace(spaceId);
            if (space != null) aResource = new Space(httpServletRequest, info, space);
	    } catch (Exception e) {
	            e.printStackTrace();
	            throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
	    }
        // End of user code
        return aResource;
    }
    public static NodeREDApp getNodeREDApp(HttpServletRequest httpServletRequest, final String bmxId, final String nodeREDAppId)
    {
        NodeREDApp aResource = null;
        
        // Start of user code getNodeREDApp
        try {
            if (nodeREDAppId == null) {
                    throw new Exception("Device ID must not be null");
            }
            final BmxServiceProviderInfo info = IoTAPIImplementation.getBmxServiceProviderInfo(httpServletRequest, bmxId);
            BluemixClient client = (BluemixClient)httpServletRequest.getSession().getAttribute(BluemixClient.BMXCLIENT_ATTRIBUTE);
            NodeREDApplication app = client.getNodeREDApplication(nodeREDAppId);
            if (app != null) aResource = new NodeREDApp(httpServletRequest, info, app);
	    } catch (Exception e) {
	            e.printStackTrace();
	            throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR);
	    }
        // End of user code
        return aResource;
    }

    public static Boolean deleteSpace(HttpServletRequest httpServletRequest, final String bmxId, final String spaceId)
    {
        Boolean deleted = false;
        // Start of user code deleteSpace
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }
    public static Boolean deleteNodeREDApp(HttpServletRequest httpServletRequest, final String bmxId, final String nodeREDAppId)
    {
        Boolean deleted = false;
        // Start of user code deleteNodeREDApp
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }

    public static Space updateSpace(HttpServletRequest httpServletRequest, final Space aResource, final String bmxId, final String spaceId) {
        Space updatedResource = null;
        // Start of user code updateSpace
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }
    public static NodeREDApp updateNodeREDApp(HttpServletRequest httpServletRequest, final NodeREDApp aResource, final String bmxId, final String nodeREDAppId) {
        NodeREDApp updatedResource = null;
        // Start of user code updateNodeREDApp
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }


    public static String getETagFromResource(final Resource aResource)
    {
        String eTag = null;
        // Start of user code getETagFromResource
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromChangeRequest(final ChangeRequest aResource)
    {
        String eTag = null;
        // Start of user code getETagFromChangeRequest
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromNodeREDApp(final NodeREDApp aResource)
    {
        String eTag = null;
        // Start of user code getETagFromNodeREDApp
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromDevice(final Device aResource)
    {
        String eTag = null;
        // Start of user code getETagFromDevice
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromPhysicalInterface(final PhysicalInterface aResource)
    {
        String eTag = null;
        // Start of user code getETagFromPhysicalInterface
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromThingType(final ThingType aResource)
    {
        String eTag = null;
        // Start of user code getETagFromThingType
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromEventType(final EventType aResource)
    {
        String eTag = null;
        // Start of user code getETagFromEventType
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromSpace(final Space aResource)
    {
        String eTag = null;
        // Start of user code getETagFromSpace
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromThing(final Thing aResource)
    {
        String eTag = null;
        // Start of user code getETagFromThing
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromSchema(final Schema aResource)
    {
        String eTag = null;
        // Start of user code getETagFromSchema
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromRule(final Rule aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRule
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromLogicalInterface(final LogicalInterface aResource)
    {
        String eTag = null;
        // Start of user code getETagFromLogicalInterface
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromDeviceType(final DeviceType aResource)
    {
        String eTag = null;
        // Start of user code getETagFromDeviceType
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
