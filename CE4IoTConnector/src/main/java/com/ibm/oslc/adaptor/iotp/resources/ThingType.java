// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.Discussion;
import com.ibm.oslc.adaptor.iotp.resources.LogicalInterface;
import com.ibm.oslc.adaptor.iotp.resources.Schema;
import com.ibm.oslc.adaptor.iotp.resources.ThingTypeMapping;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE)
@OslcName(Oslc_iotDomainConstants.THINGTYPE)
@OslcResourceShape(title = "ThingType Resource Shape", describes = Oslc_iotDomainConstants.TYPE_THINGTYPE)
public class ThingType
    extends Resource
    implements IThingType
{
    // Start of user code attributeAnnotation:schema
    // End of user code
    private Link schema = new Link();
    // Start of user code attributeAnnotation:thingTypeMappings
    // End of user code
    private HashSet<Link> thingTypeMappings = new HashSet<Link>();
    // Start of user code attributeAnnotation:logicalInterfaces
    // End of user code
    private HashSet<Link> logicalInterfaces = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public ThingType()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public ThingType(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public ThingType(final String iotId, final String thingTypeId)
           throws URISyntaxException
    {
        this (constructURI(iotId, thingTypeId));
        // Start of user code constructor3
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static URI constructURI(final String iotId, final String thingTypeId)
    {
        String basePath = OSLC4JUtils.getServletURI();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        pathParameters.put("iotId", iotId);
        pathParameters.put("thingTypeId", thingTypeId);
        String instanceURI = "iotp/{iotId}/resources/thingTypes/{thingTypeId}";
    
        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String iotId, final String thingTypeId , final String label)
    {
        return new Link(constructURI(iotId, thingTypeId), label);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.ibm.oslc.adaptor.iotp.CE4IoTConnectorResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String iotId, final String thingTypeId)
    {
        return new Link(constructURI(iotId, thingTypeId));
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_iotDomainConstants.PATH_THINGTYPE,
        ThingType.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local ThingType Resource} - update ThingType.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addThingTypeMappings(final Link thingTypeMappings)
    {
        this.thingTypeMappings.add(thingTypeMappings);
    }
    
    public void addLogicalInterfaces(final Link logicalInterfaces)
    {
        this.logicalInterfaces.add(logicalInterfaces);
    }
    
    
    // Start of user code getterAnnotation:schema
    // End of user code
    @OslcName("schema")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "schema")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_iotDomainConstants.TYPE_SCHEMA})
    @OslcReadOnly(false)
    @OslcTitle("schema")
    public Link getSchema()
    {
        // Start of user code getterInit:schema
        // End of user code
        return schema;
    }
    
    // Start of user code getterAnnotation:thingTypeMappings
    // End of user code
    @OslcName("thingTypeMappings")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "thingTypeMappings")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_iotDomainConstants.TYPE_THINGTYPEMAPPING})
    @OslcReadOnly(false)
    @OslcTitle("thingTypeMapping")
    public HashSet<Link> getThingTypeMappings()
    {
        // Start of user code getterInit:thingTypeMappings
        // End of user code
        return thingTypeMappings;
    }
    
    // Start of user code getterAnnotation:logicalInterfaces
    // End of user code
    @OslcName("logicalInterfaces")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "logicalInterfaces")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_iotDomainConstants.TYPE_LOGICALINTERFACE})
    @OslcReadOnly(false)
    @OslcTitle("applicationInterfaces")
    public HashSet<Link> getLogicalInterfaces()
    {
        // Start of user code getterInit:logicalInterfaces
        // End of user code
        return logicalInterfaces;
    }
    
    
    // Start of user code setterAnnotation:schema
    // End of user code
    public void setSchema(final Link schema )
    {
        // Start of user code setterInit:schema
        // End of user code
        this.schema = schema;
    
        // Start of user code setterFinalize:schema
        // End of user code
    }
    
    // Start of user code setterAnnotation:thingTypeMappings
    // End of user code
    public void setThingTypeMappings(final HashSet<Link> thingTypeMappings )
    {
        // Start of user code setterInit:thingTypeMappings
        // End of user code
        this.thingTypeMappings.clear();
        if (thingTypeMappings != null)
        {
            this.thingTypeMappings.addAll(thingTypeMappings);
        }
    
        // Start of user code setterFinalize:thingTypeMappings
        // End of user code
    }
    
    // Start of user code setterAnnotation:logicalInterfaces
    // End of user code
    public void setLogicalInterfaces(final HashSet<Link> logicalInterfaces )
    {
        // Start of user code setterInit:logicalInterfaces
        // End of user code
        this.logicalInterfaces.clear();
        if (logicalInterfaces != null)
        {
            this.logicalInterfaces.addAll(logicalInterfaces);
        }
    
        // Start of user code setterFinalize:logicalInterfaces
        // End of user code
    }
    
    
    static public String schemaToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:schemaToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"schema\">schema: </LABEL>";
    
        // Start of user code "Mid:schemaToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:schemaToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String schemaToHtmlForCreation1 (final HttpServletRequest httpServletRequest, final String iotId)
    {
        String s = "";
    
        // Start of user code "Init:schemaToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        s = s + "<label for=\"schema\">schema: </LABEL>";
    
        // Start of user code "Mid:schemaToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        // Start of user code "Finalize:schemaToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        return s;
    }
    static public String thingTypeMappingsToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:thingTypeMappingsToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"thingTypeMappings\">thingTypeMappings: </LABEL>";
    
        // Start of user code "Mid:thingTypeMappingsToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:thingTypeMappingsToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String thingTypeMappingsToHtmlForCreation1 (final HttpServletRequest httpServletRequest, final String iotId)
    {
        String s = "";
    
        // Start of user code "Init:thingTypeMappingsToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        s = s + "<label for=\"thingTypeMappings\">thingTypeMappings: </LABEL>";
    
        // Start of user code "Mid:thingTypeMappingsToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        // Start of user code "Finalize:thingTypeMappingsToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        return s;
    }
    static public String logicalInterfacesToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:logicalInterfacesToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"logicalInterfaces\">logicalInterfaces: </LABEL>";
    
        // Start of user code "Mid:logicalInterfacesToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:logicalInterfacesToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String logicalInterfacesToHtmlForCreation1 (final HttpServletRequest httpServletRequest, final String iotId)
    {
        String s = "";
    
        // Start of user code "Init:logicalInterfacesToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        s = s + "<label for=\"logicalInterfaces\">logicalInterfaces: </LABEL>";
    
        // Start of user code "Mid:logicalInterfacesToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        // Start of user code "Finalize:logicalInterfacesToHtmlForCreation1(...final String iotId)"
        // End of user code
    
        return s;
    }
    
    public String schemaToHtml()
    {
        String s = "";
    
        // Start of user code schematoHtml_mid
        // End of user code
    
        try {
            if ((schema == null) || (schema.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new Schema (schema.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code schematoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String thingTypeMappingsToHtml()
    {
        String s = "";
    
        // Start of user code thingTypeMappingstoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : thingTypeMappings) {
                s = s + "<li>";
                s = s + (new ThingTypeMapping (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code thingTypeMappingstoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String logicalInterfacesToHtml()
    {
        String s = "";
    
        // Start of user code logicalInterfacestoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : logicalInterfaces) {
                s = s + "<li>";
                s = s + (new LogicalInterface (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code logicalInterfacestoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
