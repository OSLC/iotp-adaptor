// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.ibm.oslc.adaptor.iotp.resources.Oslc_rmDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.DctermsDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.FoafDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.OslcDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.RdfDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_rmDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.Person;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE)
@OslcName(Oslc_rmDomainConstants.REQUIREMENT)
@OslcResourceShape(title = "Requirement Resource Shape", describes = Oslc_rmDomainConstants.TYPE_REQUIREMENT)
public class Requirement
    extends AbstractResource
    implements IRequirement
{
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:description
    // End of user code
    private String description;
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:shortTitle
    // End of user code
    private String shortTitle;
    // Start of user code attributeAnnotation:subject
    // End of user code
    private HashSet<String> subject = new HashSet<String>();
    // Start of user code attributeAnnotation:creator
    // End of user code
    private HashSet<Link> creator = new HashSet<Link>();
    // Start of user code attributeAnnotation:contributor
    // End of user code
    private HashSet<Link> contributor = new HashSet<Link>();
    // Start of user code attributeAnnotation:created
    // End of user code
    private Date created;
    // Start of user code attributeAnnotation:modified
    // End of user code
    private Date modified;
    // Start of user code attributeAnnotation:type
    // End of user code
    private HashSet<Link> type = new HashSet<Link>();
    // Start of user code attributeAnnotation:serviceProvider
    // End of user code
    private HashSet<URI> serviceProvider = new HashSet<URI>();
    // Start of user code attributeAnnotation:instanceShape
    // End of user code
    private URI instanceShape;
    // Start of user code attributeAnnotation:elaboratedBy
    // End of user code
    private HashSet<Link> elaboratedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:elaborates
    // End of user code
    private HashSet<Link> elaborates = new HashSet<Link>();
    // Start of user code attributeAnnotation:specifiedBy
    // End of user code
    private HashSet<Link> specifiedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:specifies
    // End of user code
    private HashSet<Link> specifies = new HashSet<Link>();
    // Start of user code attributeAnnotation:affectedBy
    // End of user code
    private HashSet<Link> affectedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:trackedBy
    // End of user code
    private HashSet<Link> trackedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:implementedBy
    // End of user code
    private HashSet<Link> implementedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:validatedBy
    // End of user code
    private HashSet<Link> validatedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:satisfiedBy
    // End of user code
    private HashSet<Link> satisfiedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:satisfies
    // End of user code
    private HashSet<Link> satisfies = new HashSet<Link>();
    // Start of user code attributeAnnotation:decomposedBy
    // End of user code
    private HashSet<Link> decomposedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:decomposes
    // End of user code
    private HashSet<Link> decomposes = new HashSet<Link>();
    // Start of user code attributeAnnotation:constrainedBy
    // End of user code
    private HashSet<Link> constrainedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:constrains
    // End of user code
    private HashSet<Link> constrains = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Requirement()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Requirement(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_rmDomainConstants.PATH_REQUIREMENT,
        Requirement.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Requirement Resource} - update Requirement.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addSubject(final String subject)
    {
        this.subject.add(subject);
    }
    
    public void addCreator(final Link creator)
    {
        this.creator.add(creator);
    }
    
    public void addContributor(final Link contributor)
    {
        this.contributor.add(contributor);
    }
    
    public void addType(final Link type)
    {
        this.type.add(type);
    }
    
    public void addServiceProvider(final URI serviceProvider)
    {
        this.serviceProvider.add(serviceProvider);
    }
    
    public void addElaboratedBy(final Link elaboratedBy)
    {
        this.elaboratedBy.add(elaboratedBy);
    }
    
    public void addElaborates(final Link elaborates)
    {
        this.elaborates.add(elaborates);
    }
    
    public void addSpecifiedBy(final Link specifiedBy)
    {
        this.specifiedBy.add(specifiedBy);
    }
    
    public void addSpecifies(final Link specifies)
    {
        this.specifies.add(specifies);
    }
    
    public void addAffectedBy(final Link affectedBy)
    {
        this.affectedBy.add(affectedBy);
    }
    
    public void addTrackedBy(final Link trackedBy)
    {
        this.trackedBy.add(trackedBy);
    }
    
    public void addImplementedBy(final Link implementedBy)
    {
        this.implementedBy.add(implementedBy);
    }
    
    public void addValidatedBy(final Link validatedBy)
    {
        this.validatedBy.add(validatedBy);
    }
    
    public void addSatisfiedBy(final Link satisfiedBy)
    {
        this.satisfiedBy.add(satisfiedBy);
    }
    
    public void addSatisfies(final Link satisfies)
    {
        this.satisfies.add(satisfies);
    }
    
    public void addDecomposedBy(final Link decomposedBy)
    {
        this.decomposedBy.add(decomposedBy);
    }
    
    public void addDecomposes(final Link decomposes)
    {
        this.decomposes.add(decomposes);
    }
    
    public void addConstrainedBy(final Link constrainedBy)
    {
        this.constrainedBy.add(constrainedBy);
    }
    
    public void addConstrains(final Link constrains)
    {
        this.constrains.add(constrains);
    }
    
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcDescription("Title of the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }
    
    // Start of user code getterAnnotation:description
    // End of user code
    @OslcName("description")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "description")
    @OslcDescription("Descriptive text about resource represented as rich text in XHTML content. SHOULD include only content that is valid and suitable inside an XHTML <div> element.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getDescription()
    {
        // Start of user code getterInit:description
        // End of user code
        return description;
    }
    
    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "identifier")
    @OslcDescription("A unique identifier for a resource. Typically read-only and assigned by the service provider when a resource is created. Not typically intended for end-user display.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }
    
    // Start of user code getterAnnotation:shortTitle
    // End of user code
    @OslcName("shortTitle")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_NAMSPACE + "shortTitle")
    @OslcDescription("Shorter form of dcterms:title for the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getShortTitle()
    {
        // Start of user code getterInit:shortTitle
        // End of user code
        return shortTitle;
    }
    
    // Start of user code getterAnnotation:subject
    // End of user code
    @OslcName("subject")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "subject")
    @OslcDescription("Tag or keyword for a resource. Each occurrence of a dcterms:subject property denotes an additional tag for the resource.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("")
    public HashSet<String> getSubject()
    {
        // Start of user code getterInit:subject
        // End of user code
        return subject;
    }
    
    // Start of user code getterAnnotation:creator
    // End of user code
    @OslcName("creator")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "creator")
    @OslcDescription("Creator or creators of the resource. It is likely that the target resource will be a foaf:Person but that is not necessarily the case.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({FoafDomainConstants.TYPE_PERSON})
    @OslcReadOnly(false)
    public HashSet<Link> getCreator()
    {
        // Start of user code getterInit:creator
        // End of user code
        return creator;
    }
    
    // Start of user code getterAnnotation:contributor
    // End of user code
    @OslcName("contributor")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "contributor")
    @OslcDescription("Contributor or contributors to the resource. It is likely that the target resource will be a foaf:Person but that is not necessarily the case.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({FoafDomainConstants.TYPE_PERSON})
    @OslcReadOnly(false)
    public HashSet<Link> getContributor()
    {
        // Start of user code getterInit:contributor
        // End of user code
        return contributor;
    }
    
    // Start of user code getterAnnotation:created
    // End of user code
    @OslcName("created")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "created")
    @OslcDescription("Timestamp of resource creation")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.DateTime)
    @OslcReadOnly(false)
    public Date getCreated()
    {
        // Start of user code getterInit:created
        // End of user code
        return created;
    }
    
    // Start of user code getterAnnotation:modified
    // End of user code
    @OslcName("modified")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "modified")
    @OslcDescription("Timestamp of latest resource modification")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.DateTime)
    @OslcReadOnly(false)
    public Date getModified()
    {
        // Start of user code getterInit:modified
        // End of user code
        return modified;
    }
    
    // Start of user code getterAnnotation:type
    // End of user code
    @OslcName("type")
    @OslcPropertyDefinition(RdfDomainConstants.RDF_NAMSPACE + "type")
    @OslcDescription("The resource type URIs")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getType()
    {
        // Start of user code getterInit:type
        // End of user code
        return type;
    }
    
    // Start of user code getterAnnotation:serviceProvider
    // End of user code
    @OslcName("serviceProvider")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_NAMSPACE + "serviceProvider")
    @OslcDescription("A link to the resource's OSLC Service Provider. There may be cases when the subject resource is available from a service provider that implements multiple domain specifications, which could result in multiple values for this property.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcReadOnly(false)
    public HashSet<URI> getServiceProvider()
    {
        // Start of user code getterInit:serviceProvider
        // End of user code
        return serviceProvider;
    }
    
    // Start of user code getterAnnotation:instanceShape
    // End of user code
    @OslcName("instanceShape")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_NAMSPACE + "instanceShape")
    @OslcDescription("The URI of a Resource Shape that describes the possible properties, occurrence, value types, allowed values and labels. This shape information is useful in displaying the subject resource as well as guiding clients in performing modifications. Instance shapes may be specific to the authenticated user associated with the request that retrieved the resource, the current state of the resource and other factors and thus should not be cached.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcReadOnly(false)
    public URI getInstanceShape()
    {
        // Start of user code getterInit:instanceShape
        // End of user code
        return instanceShape;
    }
    
    // Start of user code getterAnnotation:elaboratedBy
    // End of user code
    @OslcName("elaboratedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "elaboratedBy")
    @OslcDescription("The subject is elaborated by the object. For example, a user requirement is elaborated by use case.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getElaboratedBy()
    {
        // Start of user code getterInit:elaboratedBy
        // End of user code
        return elaboratedBy;
    }
    
    // Start of user code getterAnnotation:elaborates
    // End of user code
    @OslcName("elaborates")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "elaborates")
    @OslcDescription("The object is elaborated by the subject.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getElaborates()
    {
        // Start of user code getterInit:elaborates
        // End of user code
        return elaborates;
    }
    
    // Start of user code getterAnnotation:specifiedBy
    // End of user code
    @OslcName("specifiedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "specifiedBy")
    @OslcDescription("The subject is specified by the object. For example, a requirement is elaborated by a model element .")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getSpecifiedBy()
    {
        // Start of user code getterInit:specifiedBy
        // End of user code
        return specifiedBy;
    }
    
    // Start of user code getterAnnotation:specifies
    // End of user code
    @OslcName("specifies")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "specifies")
    @OslcDescription("The object is specified by the subject.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getSpecifies()
    {
        // Start of user code getterInit:specifies
        // End of user code
        return specifies;
    }
    
    // Start of user code getterAnnotation:affectedBy
    // End of user code
    @OslcName("affectedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "affectedBy")
    @OslcDescription("Requirement is affected by a resource, such as a defect or issue.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getAffectedBy()
    {
        // Start of user code getterInit:affectedBy
        // End of user code
        return affectedBy;
    }
    
    // Start of user code getterAnnotation:trackedBy
    // End of user code
    @OslcName("trackedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "trackedBy")
    @OslcDescription("Resource, such as a change request, which tracks this requirement.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getTrackedBy()
    {
        // Start of user code getterInit:trackedBy
        // End of user code
        return trackedBy;
    }
    
    // Start of user code getterAnnotation:implementedBy
    // End of user code
    @OslcName("implementedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "implementedBy")
    @OslcDescription("Resource, such as a change request, which implements this requirement.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getImplementedBy()
    {
        // Start of user code getterInit:implementedBy
        // End of user code
        return implementedBy;
    }
    
    // Start of user code getterAnnotation:validatedBy
    // End of user code
    @OslcName("validatedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "validatedBy")
    @OslcDescription("Resource, such as a test case, which validates this requirement.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getValidatedBy()
    {
        // Start of user code getterInit:validatedBy
        // End of user code
        return validatedBy;
    }
    
    // Start of user code getterAnnotation:satisfiedBy
    // End of user code
    @OslcName("satisfiedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "satisfiedBy")
    @OslcDescription("The subject is satisfied by the object. For example, a user requirement is satisfied by a system requirement.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getSatisfiedBy()
    {
        // Start of user code getterInit:satisfiedBy
        // End of user code
        return satisfiedBy;
    }
    
    // Start of user code getterAnnotation:satisfies
    // End of user code
    @OslcName("satisfies")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "satisfies")
    @OslcDescription("The object is satisfied by the subject.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getSatisfies()
    {
        // Start of user code getterInit:satisfies
        // End of user code
        return satisfies;
    }
    
    // Start of user code getterAnnotation:decomposedBy
    // End of user code
    @OslcName("decomposedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "decomposedBy")
    @OslcDescription("The subject is decomposed by the object. For example, a system requirement is decomposed into a collection of system requirements.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getDecomposedBy()
    {
        // Start of user code getterInit:decomposedBy
        // End of user code
        return decomposedBy;
    }
    
    // Start of user code getterAnnotation:decomposes
    // End of user code
    @OslcName("decomposes")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "decomposes")
    @OslcDescription("The object is decomposed by the subject.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getDecomposes()
    {
        // Start of user code getterInit:decomposes
        // End of user code
        return decomposes;
    }
    
    // Start of user code getterAnnotation:constrainedBy
    // End of user code
    @OslcName("constrainedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "constrainedBy")
    @OslcDescription("The subject is constrained by the object. For example, a functional requirement is constrained by a safety requirement.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getConstrainedBy()
    {
        // Start of user code getterInit:constrainedBy
        // End of user code
        return constrainedBy;
    }
    
    // Start of user code getterAnnotation:constrains
    // End of user code
    @OslcName("constrains")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "constrains")
    @OslcDescription("The object is constrained by the subject.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getConstrains()
    {
        // Start of user code getterInit:constrains
        // End of user code
        return constrains;
    }
    
    
    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
    
        // Start of user code setterFinalize:title
        // End of user code
    }
    
    // Start of user code setterAnnotation:description
    // End of user code
    public void setDescription(final String description )
    {
        // Start of user code setterInit:description
        // End of user code
        this.description = description;
    
        // Start of user code setterFinalize:description
        // End of user code
    }
    
    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;
    
        // Start of user code setterFinalize:identifier
        // End of user code
    }
    
    // Start of user code setterAnnotation:shortTitle
    // End of user code
    public void setShortTitle(final String shortTitle )
    {
        // Start of user code setterInit:shortTitle
        // End of user code
        this.shortTitle = shortTitle;
    
        // Start of user code setterFinalize:shortTitle
        // End of user code
    }
    
    // Start of user code setterAnnotation:subject
    // End of user code
    public void setSubject(final HashSet<String> subject )
    {
        // Start of user code setterInit:subject
        // End of user code
        this.subject.clear();
        if (subject != null)
        {
            this.subject.addAll(subject);
        }
    
        // Start of user code setterFinalize:subject
        // End of user code
    }
    
    // Start of user code setterAnnotation:creator
    // End of user code
    public void setCreator(final HashSet<Link> creator )
    {
        // Start of user code setterInit:creator
        // End of user code
        this.creator.clear();
        if (creator != null)
        {
            this.creator.addAll(creator);
        }
    
        // Start of user code setterFinalize:creator
        // End of user code
    }
    
    // Start of user code setterAnnotation:contributor
    // End of user code
    public void setContributor(final HashSet<Link> contributor )
    {
        // Start of user code setterInit:contributor
        // End of user code
        this.contributor.clear();
        if (contributor != null)
        {
            this.contributor.addAll(contributor);
        }
    
        // Start of user code setterFinalize:contributor
        // End of user code
    }
    
    // Start of user code setterAnnotation:created
    // End of user code
    public void setCreated(final Date created )
    {
        // Start of user code setterInit:created
        // End of user code
        this.created = created;
    
        // Start of user code setterFinalize:created
        // End of user code
    }
    
    // Start of user code setterAnnotation:modified
    // End of user code
    public void setModified(final Date modified )
    {
        // Start of user code setterInit:modified
        // End of user code
        this.modified = modified;
    
        // Start of user code setterFinalize:modified
        // End of user code
    }
    
    // Start of user code setterAnnotation:type
    // End of user code
    public void setType(final HashSet<Link> type )
    {
        // Start of user code setterInit:type
        // End of user code
        this.type.clear();
        if (type != null)
        {
            this.type.addAll(type);
        }
    
        // Start of user code setterFinalize:type
        // End of user code
    }
    
    // Start of user code setterAnnotation:serviceProvider
    // End of user code
    public void setServiceProvider(final HashSet<URI> serviceProvider )
    {
        // Start of user code setterInit:serviceProvider
        // End of user code
        this.serviceProvider.clear();
        if (serviceProvider != null)
        {
            this.serviceProvider.addAll(serviceProvider);
        }
    
        // Start of user code setterFinalize:serviceProvider
        // End of user code
    }
    
    // Start of user code setterAnnotation:instanceShape
    // End of user code
    public void setInstanceShape(final URI instanceShape )
    {
        // Start of user code setterInit:instanceShape
        // End of user code
        this.instanceShape = instanceShape;
    
        // Start of user code setterFinalize:instanceShape
        // End of user code
    }
    
    // Start of user code setterAnnotation:elaboratedBy
    // End of user code
    public void setElaboratedBy(final HashSet<Link> elaboratedBy )
    {
        // Start of user code setterInit:elaboratedBy
        // End of user code
        this.elaboratedBy.clear();
        if (elaboratedBy != null)
        {
            this.elaboratedBy.addAll(elaboratedBy);
        }
    
        // Start of user code setterFinalize:elaboratedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:elaborates
    // End of user code
    public void setElaborates(final HashSet<Link> elaborates )
    {
        // Start of user code setterInit:elaborates
        // End of user code
        this.elaborates.clear();
        if (elaborates != null)
        {
            this.elaborates.addAll(elaborates);
        }
    
        // Start of user code setterFinalize:elaborates
        // End of user code
    }
    
    // Start of user code setterAnnotation:specifiedBy
    // End of user code
    public void setSpecifiedBy(final HashSet<Link> specifiedBy )
    {
        // Start of user code setterInit:specifiedBy
        // End of user code
        this.specifiedBy.clear();
        if (specifiedBy != null)
        {
            this.specifiedBy.addAll(specifiedBy);
        }
    
        // Start of user code setterFinalize:specifiedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:specifies
    // End of user code
    public void setSpecifies(final HashSet<Link> specifies )
    {
        // Start of user code setterInit:specifies
        // End of user code
        this.specifies.clear();
        if (specifies != null)
        {
            this.specifies.addAll(specifies);
        }
    
        // Start of user code setterFinalize:specifies
        // End of user code
    }
    
    // Start of user code setterAnnotation:affectedBy
    // End of user code
    public void setAffectedBy(final HashSet<Link> affectedBy )
    {
        // Start of user code setterInit:affectedBy
        // End of user code
        this.affectedBy.clear();
        if (affectedBy != null)
        {
            this.affectedBy.addAll(affectedBy);
        }
    
        // Start of user code setterFinalize:affectedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:trackedBy
    // End of user code
    public void setTrackedBy(final HashSet<Link> trackedBy )
    {
        // Start of user code setterInit:trackedBy
        // End of user code
        this.trackedBy.clear();
        if (trackedBy != null)
        {
            this.trackedBy.addAll(trackedBy);
        }
    
        // Start of user code setterFinalize:trackedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:implementedBy
    // End of user code
    public void setImplementedBy(final HashSet<Link> implementedBy )
    {
        // Start of user code setterInit:implementedBy
        // End of user code
        this.implementedBy.clear();
        if (implementedBy != null)
        {
            this.implementedBy.addAll(implementedBy);
        }
    
        // Start of user code setterFinalize:implementedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:validatedBy
    // End of user code
    public void setValidatedBy(final HashSet<Link> validatedBy )
    {
        // Start of user code setterInit:validatedBy
        // End of user code
        this.validatedBy.clear();
        if (validatedBy != null)
        {
            this.validatedBy.addAll(validatedBy);
        }
    
        // Start of user code setterFinalize:validatedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:satisfiedBy
    // End of user code
    public void setSatisfiedBy(final HashSet<Link> satisfiedBy )
    {
        // Start of user code setterInit:satisfiedBy
        // End of user code
        this.satisfiedBy.clear();
        if (satisfiedBy != null)
        {
            this.satisfiedBy.addAll(satisfiedBy);
        }
    
        // Start of user code setterFinalize:satisfiedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:satisfies
    // End of user code
    public void setSatisfies(final HashSet<Link> satisfies )
    {
        // Start of user code setterInit:satisfies
        // End of user code
        this.satisfies.clear();
        if (satisfies != null)
        {
            this.satisfies.addAll(satisfies);
        }
    
        // Start of user code setterFinalize:satisfies
        // End of user code
    }
    
    // Start of user code setterAnnotation:decomposedBy
    // End of user code
    public void setDecomposedBy(final HashSet<Link> decomposedBy )
    {
        // Start of user code setterInit:decomposedBy
        // End of user code
        this.decomposedBy.clear();
        if (decomposedBy != null)
        {
            this.decomposedBy.addAll(decomposedBy);
        }
    
        // Start of user code setterFinalize:decomposedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:decomposes
    // End of user code
    public void setDecomposes(final HashSet<Link> decomposes )
    {
        // Start of user code setterInit:decomposes
        // End of user code
        this.decomposes.clear();
        if (decomposes != null)
        {
            this.decomposes.addAll(decomposes);
        }
    
        // Start of user code setterFinalize:decomposes
        // End of user code
    }
    
    // Start of user code setterAnnotation:constrainedBy
    // End of user code
    public void setConstrainedBy(final HashSet<Link> constrainedBy )
    {
        // Start of user code setterInit:constrainedBy
        // End of user code
        this.constrainedBy.clear();
        if (constrainedBy != null)
        {
            this.constrainedBy.addAll(constrainedBy);
        }
    
        // Start of user code setterFinalize:constrainedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:constrains
    // End of user code
    public void setConstrains(final HashSet<Link> constrains )
    {
        // Start of user code setterInit:constrains
        // End of user code
        this.constrains.clear();
        if (constrains != null)
        {
            this.constrains.addAll(constrains);
        }
    
        // Start of user code setterFinalize:constrains
        // End of user code
    }
    
    
    static public String titleToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:titleToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"title\">title: </LABEL>";
    
        // Start of user code "Mid:titleToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"title\" type=\"text\" style=\"width: 400px\" id=\"title\" >";
        // Start of user code "Finalize:titleToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String descriptionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:descriptionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"description\">description: </LABEL>";
    
        // Start of user code "Mid:descriptionToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"description\" type=\"text\" style=\"width: 400px\" id=\"description\" >";
        // Start of user code "Finalize:descriptionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String identifierToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:identifierToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"identifier\">identifier: </LABEL>";
    
        // Start of user code "Mid:identifierToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"identifier\" type=\"text\" style=\"width: 400px\" id=\"identifier\" >";
        // Start of user code "Finalize:identifierToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String shortTitleToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:shortTitleToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"shortTitle\">shortTitle: </LABEL>";
    
        // Start of user code "Mid:shortTitleToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"shortTitle\" type=\"text\" style=\"width: 400px\" id=\"shortTitle\" >";
        // Start of user code "Finalize:shortTitleToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String subjectToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:subjectToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"subject\">subject: </LABEL>";
    
        // Start of user code "Mid:subjectToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"subject\" type=\"text\" style=\"width: 400px\" id=\"subject\" >";
        // Start of user code "Finalize:subjectToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String creatorToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:creatorToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"creator\">creator: </LABEL>";
    
        // Start of user code "Mid:creatorToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:creatorToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String contributorToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:contributorToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"contributor\">contributor: </LABEL>";
    
        // Start of user code "Mid:contributorToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:contributorToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String createdToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:createdToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"created\">created: </LABEL>";
    
        // Start of user code "Mid:createdToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"created\" type=\"text\" style=\"width: 400px\" id=\"created\" >";
        // Start of user code "Finalize:createdToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String modifiedToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:modifiedToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"modified\">modified: </LABEL>";
    
        // Start of user code "Mid:modifiedToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"modified\" type=\"text\" style=\"width: 400px\" id=\"modified\" >";
        // Start of user code "Finalize:modifiedToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String typeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:typeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"type\">type: </LABEL>";
    
        // Start of user code "Mid:typeToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:typeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String serviceProviderToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";
    
        // Start of user code "Mid:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"serviceProvider\" type=\"text\" style=\"width: 400px\" id=\"serviceProvider\" >";
        // Start of user code "Finalize:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String instanceShapeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"instanceShape\">instanceShape: </LABEL>";
    
        // Start of user code "Mid:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"instanceShape\" type=\"text\" style=\"width: 400px\" id=\"instanceShape\" >";
        // Start of user code "Finalize:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String elaboratedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:elaboratedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"elaboratedBy\">elaboratedBy: </LABEL>";
    
        // Start of user code "Mid:elaboratedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:elaboratedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String elaboratesToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:elaboratesToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"elaborates\">elaborates: </LABEL>";
    
        // Start of user code "Mid:elaboratesToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:elaboratesToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String specifiedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:specifiedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"specifiedBy\">specifiedBy: </LABEL>";
    
        // Start of user code "Mid:specifiedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:specifiedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String specifiesToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:specifiesToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"specifies\">specifies: </LABEL>";
    
        // Start of user code "Mid:specifiesToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:specifiesToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String affectedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:affectedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"affectedBy\">affectedBy: </LABEL>";
    
        // Start of user code "Mid:affectedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:affectedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String trackedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:trackedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"trackedBy\">trackedBy: </LABEL>";
    
        // Start of user code "Mid:trackedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:trackedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String implementedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:implementedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"implementedBy\">implementedBy: </LABEL>";
    
        // Start of user code "Mid:implementedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:implementedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String validatedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:validatedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"validatedBy\">validatedBy: </LABEL>";
    
        // Start of user code "Mid:validatedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:validatedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String satisfiedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:satisfiedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"satisfiedBy\">satisfiedBy: </LABEL>";
    
        // Start of user code "Mid:satisfiedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:satisfiedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String satisfiesToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:satisfiesToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"satisfies\">satisfies: </LABEL>";
    
        // Start of user code "Mid:satisfiesToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:satisfiesToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String decomposedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:decomposedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"decomposedBy\">decomposedBy: </LABEL>";
    
        // Start of user code "Mid:decomposedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:decomposedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String decomposesToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:decomposesToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"decomposes\">decomposes: </LABEL>";
    
        // Start of user code "Mid:decomposesToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:decomposesToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String constrainedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:constrainedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"constrainedBy\">constrainedBy: </LABEL>";
    
        // Start of user code "Mid:constrainedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:constrainedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String constrainsToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:constrainsToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"constrains\">constrains: </LABEL>";
    
        // Start of user code "Mid:constrainsToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:constrainsToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String titleToHtml()
    {
        String s = "";
    
        // Start of user code titletoHtml_mid
        // End of user code
    
        try {
            if (title == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + title.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code titletoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String descriptionToHtml()
    {
        String s = "";
    
        // Start of user code descriptiontoHtml_mid
        // End of user code
    
        try {
            if (description == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + description.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code descriptiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String identifierToHtml()
    {
        String s = "";
    
        // Start of user code identifiertoHtml_mid
        // End of user code
    
        try {
            if (identifier == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + identifier.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code identifiertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String shortTitleToHtml()
    {
        String s = "";
    
        // Start of user code shortTitletoHtml_mid
        // End of user code
    
        try {
            if (shortTitle == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + shortTitle.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code shortTitletoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String subjectToHtml()
    {
        String s = "";
    
        // Start of user code subjecttoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            Iterator<String> itr = subject.iterator();
            while(itr.hasNext()) {
                s = s + "<li>";
                s= s + itr.next().toString();
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code subjecttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String creatorToHtml()
    {
        String s = "";
    
        // Start of user code creatortoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : creator) {
                s = s + "<li>";
                s = s + (new Person (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code creatortoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String contributorToHtml()
    {
        String s = "";
    
        // Start of user code contributortoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : contributor) {
                s = s + "<li>";
                s = s + (new Person (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code contributortoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String createdToHtml()
    {
        String s = "";
    
        // Start of user code createdtoHtml_mid
        // End of user code
    
        try {
            if (created == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + created.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code createdtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String modifiedToHtml()
    {
        String s = "";
    
        // Start of user code modifiedtoHtml_mid
        // End of user code
    
        try {
            if (modified == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + modified.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code modifiedtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String typeToHtml()
    {
        String s = "";
    
        // Start of user code typetoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : type) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code typetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String serviceProviderToHtml()
    {
        String s = "";
    
        // Start of user code serviceProvidertoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            Iterator<URI> itr = serviceProvider.iterator();
            while(itr.hasNext()) {
                s = s + "<li>";
                s= s + itr.next().toString();
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code serviceProvidertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String instanceShapeToHtml()
    {
        String s = "";
    
        // Start of user code instanceShapetoHtml_mid
        // End of user code
    
        try {
            if (instanceShape == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + instanceShape.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code instanceShapetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String elaboratedByToHtml()
    {
        String s = "";
    
        // Start of user code elaboratedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : elaboratedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code elaboratedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String elaboratesToHtml()
    {
        String s = "";
    
        // Start of user code elaboratestoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : elaborates) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code elaboratestoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String specifiedByToHtml()
    {
        String s = "";
    
        // Start of user code specifiedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : specifiedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code specifiedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String specifiesToHtml()
    {
        String s = "";
    
        // Start of user code specifiestoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : specifies) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code specifiestoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String affectedByToHtml()
    {
        String s = "";
    
        // Start of user code affectedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : affectedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code affectedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String trackedByToHtml()
    {
        String s = "";
    
        // Start of user code trackedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : trackedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code trackedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String implementedByToHtml()
    {
        String s = "";
    
        // Start of user code implementedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : implementedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code implementedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String validatedByToHtml()
    {
        String s = "";
    
        // Start of user code validatedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : validatedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code validatedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String satisfiedByToHtml()
    {
        String s = "";
    
        // Start of user code satisfiedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : satisfiedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code satisfiedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String satisfiesToHtml()
    {
        String s = "";
    
        // Start of user code satisfiestoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : satisfies) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code satisfiestoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String decomposedByToHtml()
    {
        String s = "";
    
        // Start of user code decomposedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : decomposedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code decomposedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String decomposesToHtml()
    {
        String s = "";
    
        // Start of user code decomposestoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : decomposes) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code decomposestoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String constrainedByToHtml()
    {
        String s = "";
    
        // Start of user code constrainedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : constrainedBy) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code constrainedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String constrainsToHtml()
    {
        String s = "";
    
        // Start of user code constrainstoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : constrains) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code constrainstoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
