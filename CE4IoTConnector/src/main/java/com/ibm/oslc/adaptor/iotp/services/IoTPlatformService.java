// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Jim Amsden          - Support for UI Preview (494303)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONObject;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import com.ibm.oslc.adaptor.iotp.CE4IoTConnectorManager;
import com.ibm.oslc.adaptor.iotp.CE4IoTConnectorConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_amDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_cmDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_rmDomainConstants;
import com.ibm.oslc.adaptor.iotp.servlet.ServiceProviderCatalogSingleton;
import com.ibm.oslc.adaptor.iotp.resources.ChangeRequest;
import com.ibm.oslc.adaptor.iotp.resources.Device;
import com.ibm.oslc.adaptor.iotp.resources.DeviceInfo;
import com.ibm.oslc.adaptor.iotp.resources.DeviceType;
import com.ibm.oslc.adaptor.iotp.resources.DeviceTypeMapping;
import com.ibm.oslc.adaptor.iotp.resources.Discussion;
import com.ibm.oslc.adaptor.iotp.resources.EventType;
import com.ibm.oslc.adaptor.iotp.resources.LogicalInterface;
import com.ibm.oslc.adaptor.iotp.resources.MetaData;
import com.ibm.oslc.adaptor.iotp.resources.MetaProperty;
import com.ibm.oslc.adaptor.iotp.resources.Person;
import com.ibm.oslc.adaptor.iotp.resources.PhysicalInterface;
import com.ibm.oslc.adaptor.iotp.resources.Requirement;
import com.ibm.oslc.adaptor.iotp.resources.Resource;
import com.ibm.oslc.adaptor.iotp.resources.Rule;
import com.ibm.oslc.adaptor.iotp.resources.Schema;
import com.ibm.oslc.adaptor.iotp.resources.Thing;
import com.ibm.oslc.adaptor.iotp.resources.ThingType;
import com.ibm.oslc.adaptor.iotp.resources.ThingTypeMapping;

// Start of user code imports
import com.ibm.oslc.adaptor.iotp.impl.IoTAPIImplementation;
import com.ibm.oslc.adaptor.iotp.IotpServiceProviderInfo;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_iotDomainConstants.IOT_PLATFORM_DOMAIN)
@Path("iotp/{iotId}/resources")
public class IoTPlatformService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public IoTPlatformService()
    {
        super();
    }

    @OslcQueryCapability
    (
        title = "EventTypeQueryCapability",
        label = "Event Type Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.EVENTTYPE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.EVENTTYPE_TYPE},
        usages = {}
    )
    @GET
    @Path("eventtype")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public EventType[] queryEventTypes(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryEventTypes
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<EventType> resources = CE4IoTConnectorManager.queryEventTypes(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new EventType [resources.size()]);
    }

    @GET
    @Path("eventtype")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryEventTypesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryEventTypesAsHtml
        // End of user code

        final List<EventType> resources = CE4IoTConnectorManager.queryEventTypes(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryEventTypesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/eventtypescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "DeviceTypeQueryCapability",
        label = "Device Type Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.DEVICETYPE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.DEVICETYPE_TYPE},
        usages = {}
    )
    @GET
    @Path("devicetype")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public DeviceType[] queryDeviceTypes(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryDeviceTypes
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<DeviceType> resources = CE4IoTConnectorManager.queryDeviceTypes(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new DeviceType [resources.size()]);
    }

    @GET
    @Path("devicetype")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryDeviceTypesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryDeviceTypesAsHtml
        // End of user code

        final List<DeviceType> resources = CE4IoTConnectorManager.queryDeviceTypes(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryDeviceTypesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicetypescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "PhysicalIntefaceQueryCapability",
        label = "Physical Inteface Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.PHYSICALINTERFACE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.PHYSICALINTERFACE_TYPE},
        usages = {}
    )
    @GET
    @Path("physicalinterface")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public PhysicalInterface[] queryPhysicalInterfaces(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryPhysicalInterfaces
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<PhysicalInterface> resources = CE4IoTConnectorManager.queryPhysicalInterfaces(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new PhysicalInterface [resources.size()]);
    }

    @GET
    @Path("physicalinterface")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryPhysicalInterfacesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryPhysicalInterfacesAsHtml
        // End of user code

        final List<PhysicalInterface> resources = CE4IoTConnectorManager.queryPhysicalInterfaces(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryPhysicalInterfacesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/physicalinterfacescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "RuleQueryCapability",
        label = "Rule Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.RULE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.RULE_TYPE},
        usages = {}
    )
    @GET
    @Path("rule")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Rule[] queryRules(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryRules
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<Rule> resources = CE4IoTConnectorManager.queryRules(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new Rule [resources.size()]);
    }

    @GET
    @Path("rule")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryRulesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryRulesAsHtml
        // End of user code

        final List<Rule> resources = CE4IoTConnectorManager.queryRules(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryRulesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/rulescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "SchemaQueryCapability",
        label = "Schema Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.SCHEMA_PATH,
        resourceTypes = {Oslc_iotDomainConstants.SCHEMA_TYPE},
        usages = {}
    )
    @GET
    @Path("schema")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Schema[] querySchemas(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code querySchemas
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<Schema> resources = CE4IoTConnectorManager.querySchemas(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new Schema [resources.size()]);
    }

    @GET
    @Path("schema")
    @Produces({ MediaType.TEXT_HTML })
    public Response querySchemasAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code querySchemasAsHtml
        // End of user code

        final List<Schema> resources = CE4IoTConnectorManager.querySchemas(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code querySchemasAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/schemascollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "ThingTypeQueryCapability",
        label = "Thing Type Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.THINGTYPE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.THINGTYPE_TYPE},
        usages = {}
    )
    @GET
    @Path("thingtype")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public ThingType[] queryThingTypes(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryThingTypes
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<ThingType> resources = CE4IoTConnectorManager.queryThingTypes(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new ThingType [resources.size()]);
    }

    @GET
    @Path("thingtype")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryThingTypesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryThingTypesAsHtml
        // End of user code

        final List<ThingType> resources = CE4IoTConnectorManager.queryThingTypes(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryThingTypesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/thingtypescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "LogicalInterfaceQueryCapability",
        label = "Logical Interface Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.LOGICALINTERFACE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.LOGICALINTERFACE_TYPE},
        usages = {}
    )
    @GET
    @Path("logicalinterface")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public LogicalInterface[] queryLogicalInterfaces(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryLogicalInterfaces
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<LogicalInterface> resources = CE4IoTConnectorManager.queryLogicalInterfaces(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new LogicalInterface [resources.size()]);
    }

    @GET
    @Path("logicalinterface")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryLogicalInterfacesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryLogicalInterfacesAsHtml
        // End of user code

        final List<LogicalInterface> resources = CE4IoTConnectorManager.queryLogicalInterfaces(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryLogicalInterfacesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/logicalinterfacescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "DeviceQueryCapability",
        label = "DeviceQueryCapability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.DEVICE_PATH,
        resourceTypes = {Oslc_iotDomainConstants.DEVICE_TYPE},
        usages = {}
    )
    @GET
    @Path("device")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Device[] queryDevices(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryDevices
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<Device> resources = CE4IoTConnectorManager.queryDevices(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new Device [resources.size()]);
    }

    @GET
    @Path("device")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryDevicesAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryDevicesAsHtml
        // End of user code

        final List<Device> resources = CE4IoTConnectorManager.queryDevices(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryDevicesAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcQueryCapability
    (
        title = "ThingQueryCapability",
        label = "ThingQueryCapability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.THING_PATH,
        resourceTypes = {Oslc_iotDomainConstants.THING_TYPE},
        usages = {}
    )
    @GET
    @Path("thing")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Thing[] queryThings(
                                                    @PathParam("iotId") final String iotId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryThings
        // Here additional logic can be implemented that complements main action taken in CE4IoTConnectorManager
        // End of user code

        final List<Thing> resources = CE4IoTConnectorManager.queryThings(httpServletRequest, iotId, where, page, limit);
        return resources.toArray(new Thing [resources.size()]);
    }

    @GET
    @Path("thing")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryThingsAsHtml(
                                    @PathParam("iotId") final String iotId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryThingsAsHtml
        // End of user code

        final List<Thing> resources = CE4IoTConnectorManager.queryThings(httpServletRequest, iotId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryThingsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/thingscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "IotSelectionDialog",
         label = "IoT Platform Selection Dialog",
         uri = "iotp/{iotId}/resources/selector",
         hintWidth = "525px",
         hintHeight = "325px",
         resourceTypes = {Oslc_rmDomainConstants.REQUIREMENT_TYPE, Oslc_cmDomainConstants.CHANGEREQUEST_TYPE, Oslc_amDomainConstants.RESOURCE_TYPE},
         usages = {"http://open-services.net/ns/am#IoTPSelectionDialog"}
    )
    @GET
    @Path("selector")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void RequirementAndChangeRequestAndResourceSelector(
        @QueryParam("terms") final String terms
        , @PathParam("iotId") final String iotId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code RequirementAndChangeRequestAndResourceSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",uriInfo.getAbsolutePath().toString());
            // Start of user code RequirementAndChangeRequestAndResourceSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<AbstractResource> resources = CE4IoTConnectorManager.RequirementAndChangeRequestAndResourceSelector(httpServletRequest, iotId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/iotpselectiondialogselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/iotpselectiondialogselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single Rule via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "RuleCreationFactory",
         label = "Rule Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.RULE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.RULE_TYPE},
         usages = {}
    )
    @POST
    @Path("rule")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createRule(
            @PathParam("iotId") final String iotId ,
            final Rule aResource
        ) throws IOException, ServletException
    {
        try {
            Rule newResource = CE4IoTConnectorManager.createRule(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromRule(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single EventType via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "EventTypeCreationFactory",
         label = "Event Type CreationFactory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.EVENTTYPE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.EVENTTYPE_TYPE},
         usages = {}
    )
    @POST
    @Path("eventtype")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createEventType(
            @PathParam("iotId") final String iotId ,
            final EventType aResource
        ) throws IOException, ServletException
    {
        try {
            EventType newResource = CE4IoTConnectorManager.createEventType(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromEventType(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single PhysicalInterface via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "PhysicalInterfaceCreationFactory",
         label = "Physical Interface Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.PHYSICALINTERFACE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.PHYSICALINTERFACE_TYPE},
         usages = {}
    )
    @POST
    @Path("physicalinterface")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createPhysicalInterface(
            @PathParam("iotId") final String iotId ,
            final PhysicalInterface aResource
        ) throws IOException, ServletException
    {
        try {
            PhysicalInterface newResource = CE4IoTConnectorManager.createPhysicalInterface(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromPhysicalInterface(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single Schema via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "SchemaCreationFactory",
         label = "Schema Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.SCHEMA_PATH},
         resourceTypes = {Oslc_iotDomainConstants.SCHEMA_TYPE},
         usages = {}
    )
    @POST
    @Path("schema")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createSchema(
            @PathParam("iotId") final String iotId ,
            final Schema aResource
        ) throws IOException, ServletException
    {
        try {
            Schema newResource = CE4IoTConnectorManager.createSchema(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromSchema(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single ThingType via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "ThingTypeCreationFactory",
         label = "Thing Type Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.THINGTYPE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.THINGTYPE_TYPE},
         usages = {}
    )
    @POST
    @Path("thingtype")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createThingType(
            @PathParam("iotId") final String iotId ,
            final ThingType aResource
        ) throws IOException, ServletException
    {
        try {
            ThingType newResource = CE4IoTConnectorManager.createThingType(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromThingType(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single DeviceType via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "DeviceTypeCreationFactory",
         label = "Device Type Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.DEVICETYPE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.DEVICETYPE_TYPE},
         usages = {}
    )
    @POST
    @Path("devicetype")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createDeviceType(
            @PathParam("iotId") final String iotId ,
            final DeviceType aResource
        ) throws IOException, ServletException
    {
        try {
            DeviceType newResource = CE4IoTConnectorManager.createDeviceType(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromDeviceType(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single LogicalInterface via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "LogicalInterfaceCreationFactory",
         label = "Logical Interface Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.LOGICALINTERFACE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.LOGICALINTERFACE_TYPE},
         usages = {}
    )
    @POST
    @Path("logicalinterface")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createLogicalInterface(
            @PathParam("iotId") final String iotId ,
            final LogicalInterface aResource
        ) throws IOException, ServletException
    {
        try {
            LogicalInterface newResource = CE4IoTConnectorManager.createLogicalInterface(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromLogicalInterface(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single Thing via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "ThingCreationFactory",
         label = "ThingCreationFactory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.THING_PATH},
         resourceTypes = {Oslc_iotDomainConstants.THING_TYPE},
         usages = {}
    )
    @POST
    @Path("thing")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createThing(
            @PathParam("iotId") final String iotId ,
            final Thing aResource
        ) throws IOException, ServletException
    {
        try {
            Thing newResource = CE4IoTConnectorManager.createThing(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromThing(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single Device via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "DeviceCreationFactory",
         label = "Device Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_iotDomainConstants.DEVICE_PATH},
         resourceTypes = {Oslc_iotDomainConstants.DEVICE_TYPE},
         usages = {}
    )
    @POST
    @Path("typeId/create")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createDevice(
            @PathParam("iotId") final String iotId ,
            final Device aResource
        ) throws IOException, ServletException
    {
        try {
            Device newResource = CE4IoTConnectorManager.createDevice(httpServletRequest, aResource, iotId);
            httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromDevice(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("creator")
    @Consumes({MediaType.WILDCARD})
    public void ResourceAndChangeRequestAndRequirementCreator(
                @PathParam("iotId") final String iotId
        ) throws IOException, ServletException
    {
        // Start of user code ResourceAndChangeRequestAndRequirementCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", uriInfo.getAbsolutePath().toString());
        httpServletRequest.setAttribute("iotId", iotId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/iotpcreationdialogcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "ResourceCreationDialog",
         label = "Resource Creation Dialog",
         uri = "iotp/{iotId}/resources/creator",
         hintWidth = "525px",
         hintHeight = "225px",
         resourceTypes = {Oslc_amDomainConstants.RESOURCE_TYPE, Oslc_cmDomainConstants.CHANGEREQUEST_TYPE, Oslc_rmDomainConstants.REQUIREMENT_TYPE},
         usages = {"http://open-services.net/ns/am#IoTPCreationDialog"}
    )
    @POST
    @Path("creator")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createResourceAndChangeRequestAndRequirement(
            @PathParam("iotId") final String iotId
        ) {
        try {
            AbstractResource newResource = null;

            // Start of user code createResourceAndChangeRequestAndRequirement
            // TODO Implement code to create the new resource. This method seems to be expected to handle more than a single type of resources.
            // Get the user selected resource type from the query parameter
            String[] paramValues;
            Resource aResource = new Resource();
            String resourceType = httpServletRequest.getParameter("type");
            if (resourceType.equals("devicetype")) {
            	aResource = new DeviceType();
            } else if  (resourceType.equals("device")) {
            	aResource = new Device();            	
            }
            // generic Resource Properties to set (and these are all that are needed for any IoT Platform resource:
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0) {
                            aResource.setIdentifier(paramValues[0]);
                    		aResource.setTitle(aResource.getIdentifier());
                    		aResource.setShortTitle(aResource.getIdentifier());
                    		// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                        }
                    }
                    paramValues = httpServletRequest.getParameterValues("description");
                    if (paramValues != null) {
                            if (paramValues.length == 1) {
                                if (paramValues[0].length() != 0)
                                    aResource.setDescription(paramValues[0]);
                                // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                            }

                    }
            }
            
            if (resourceType.equals("devicetype")) {
                newResource = CE4IoTConnectorManager.createDeviceType(httpServletRequest, (DeviceType)aResource, iotId);
            } else if  (resourceType.equals("device")) {
            	String typeId = httpServletRequest.getParameter("typeId");
            	((Device)aResource).setTypeId(typeId);
                newResource = CE4IoTConnectorManager.createDevice(httpServletRequest, (Device)aResource, iotId);
            }

            // End of user code

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    @GET
    @Path("deviceTypes/{deviceTypeId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public DeviceType getDeviceType(
                @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final DeviceType aDeviceType = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aDeviceType != null) {
            // Start of user code getDeviceType
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aDeviceType;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("deviceTypes/{deviceTypeId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getDeviceTypeAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceTypeAsHtml_init
        // End of user code

        final DeviceType aDeviceType = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aDeviceType != null) {
            httpServletRequest.setAttribute("aDeviceType", aDeviceType);
            // Start of user code getDeviceTypeAsHtml_setAttributes
            // Redirect to the Watson IoT Platform dashboard as best you can for the resource
			try {
				IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
	            String iotDashboardURI = "https://"+iotId+"."+info.platformBase+"/dashboard/#/devices/deviceTypes-v2";
	            httpServletResponse.sendRedirect(iotDashboardURI);
	            return Response.ok().build();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicetype.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("deviceTypes/{deviceTypeId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getDeviceTypeCompact(
        @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getDeviceTypeCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final DeviceType aDeviceType = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aDeviceType != null) {
            final Compact compact = new Compact();

            compact.setAbout(aDeviceType.getAbout());
            compact.setTitle(aDeviceType.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aDeviceType.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aDeviceType.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("deviceTypes/{deviceTypeId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDeviceTypeAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceTypeAsHtmlSmallPreview_init
        // End of user code

        final DeviceType aDeviceType = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aDeviceType != null) {
            httpServletRequest.setAttribute("aDeviceType", aDeviceType);
            // Start of user code getDeviceTypeAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicetypesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("deviceTypes/{deviceTypeId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDeviceTypeAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceTypeAsHtmlLargePreview_init
        // End of user code

        final DeviceType aDeviceType = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aDeviceType != null) {
            httpServletRequest.setAttribute("aDeviceType", aDeviceType);
            // Start of user code getDeviceTypeAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicetypelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("rules/{ruleId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Rule getRule(
                @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Rule aRule = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aRule != null) {
            // Start of user code getRule
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aRule;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("rules/{ruleId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getRuleAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getRuleAsHtml_init
        // End of user code

        final Rule aRule = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aRule != null) {
            httpServletRequest.setAttribute("aRule", aRule);
            // Start of user code getRuleAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/rule.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("rules/{ruleId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getRuleCompact(
        @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getRuleCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Rule aRule = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aRule != null) {
            final Compact compact = new Compact();

            compact.setAbout(aRule.getAbout());
            compact.setTitle(aRule.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aRule.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aRule.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("rules/{ruleId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getRuleAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getRuleAsHtmlSmallPreview_init
        // End of user code

        final Rule aRule = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aRule != null) {
            httpServletRequest.setAttribute("aRule", aRule);
            // Start of user code getRuleAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/rulesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("rules/{ruleId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getRuleAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getRuleAsHtmlLargePreview_init
        // End of user code

        final Rule aRule = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aRule != null) {
            httpServletRequest.setAttribute("aRule", aRule);
            // Start of user code getRuleAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/rulelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("logicalInterfaces/{logicalInterfaceId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public LogicalInterface getLogicalInterface(
                @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final LogicalInterface aLogicalInterface = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aLogicalInterface != null) {
            // Start of user code getLogicalInterface
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aLogicalInterface;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("logicalInterfaces/{logicalInterfaceId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getLogicalInterfaceAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getLogicalInterfaceAsHtml_init
        // End of user code

        final LogicalInterface aLogicalInterface = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aLogicalInterface != null) {
            httpServletRequest.setAttribute("aLogicalInterface", aLogicalInterface);
            // Start of user code getLogicalInterfaceAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/logicalinterface.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("logicalInterfaces/{logicalInterfaceId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getLogicalInterfaceCompact(
        @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getLogicalInterfaceCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final LogicalInterface aLogicalInterface = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aLogicalInterface != null) {
            final Compact compact = new Compact();

            compact.setAbout(aLogicalInterface.getAbout());
            compact.setTitle(aLogicalInterface.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aLogicalInterface.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aLogicalInterface.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("logicalInterfaces/{logicalInterfaceId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getLogicalInterfaceAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getLogicalInterfaceAsHtmlSmallPreview_init
        // End of user code

        final LogicalInterface aLogicalInterface = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aLogicalInterface != null) {
            httpServletRequest.setAttribute("aLogicalInterface", aLogicalInterface);
            // Start of user code getLogicalInterfaceAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/logicalinterfacesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("logicalInterfaces/{logicalInterfaceId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getLogicalInterfaceAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getLogicalInterfaceAsHtmlLargePreview_init
        // End of user code

        final LogicalInterface aLogicalInterface = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aLogicalInterface != null) {
            httpServletRequest.setAttribute("aLogicalInterface", aLogicalInterface);
            // Start of user code getLogicalInterfaceAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/logicalinterfacelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("eventTypes/{eventTypeId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public EventType getEventType(
                @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final EventType aEventType = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aEventType != null) {
            // Start of user code getEventType
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aEventType;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("eventTypes/{eventTypeId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getEventTypeAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEventTypeAsHtml_init
        // End of user code

        final EventType aEventType = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aEventType != null) {
            httpServletRequest.setAttribute("aEventType", aEventType);
            // Start of user code getEventTypeAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/eventtype.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("eventTypes/{eventTypeId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getEventTypeCompact(
        @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getEventTypeCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final EventType aEventType = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aEventType != null) {
            final Compact compact = new Compact();

            compact.setAbout(aEventType.getAbout());
            compact.setTitle(aEventType.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aEventType.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aEventType.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("eventTypes/{eventTypeId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getEventTypeAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEventTypeAsHtmlSmallPreview_init
        // End of user code

        final EventType aEventType = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aEventType != null) {
            httpServletRequest.setAttribute("aEventType", aEventType);
            // Start of user code getEventTypeAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/eventtypesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("eventTypes/{eventTypeId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getEventTypeAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEventTypeAsHtmlLargePreview_init
        // End of user code

        final EventType aEventType = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aEventType != null) {
            httpServletRequest.setAttribute("aEventType", aEventType);
            // Start of user code getEventTypeAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/eventtypelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("physicalInterfaces/{physicalInterfaceId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public PhysicalInterface getPhysicalInterface(
                @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final PhysicalInterface aPhysicalInterface = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aPhysicalInterface != null) {
            // Start of user code getPhysicalInterface
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aPhysicalInterface;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("physicalInterfaces/{physicalInterfaceId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getPhysicalInterfaceAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getPhysicalInterfaceAsHtml_init
        // End of user code

        final PhysicalInterface aPhysicalInterface = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aPhysicalInterface != null) {
            httpServletRequest.setAttribute("aPhysicalInterface", aPhysicalInterface);
            // Start of user code getPhysicalInterfaceAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/physicalinterface.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("physicalInterfaces/{physicalInterfaceId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getPhysicalInterfaceCompact(
        @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getPhysicalInterfaceCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final PhysicalInterface aPhysicalInterface = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aPhysicalInterface != null) {
            final Compact compact = new Compact();

            compact.setAbout(aPhysicalInterface.getAbout());
            compact.setTitle(aPhysicalInterface.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aPhysicalInterface.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aPhysicalInterface.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("physicalInterfaces/{physicalInterfaceId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getPhysicalInterfaceAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getPhysicalInterfaceAsHtmlSmallPreview_init
        // End of user code

        final PhysicalInterface aPhysicalInterface = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aPhysicalInterface != null) {
            httpServletRequest.setAttribute("aPhysicalInterface", aPhysicalInterface);
            // Start of user code getPhysicalInterfaceAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/physicalinterfacesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("physicalInterfaces/{physicalInterfaceId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getPhysicalInterfaceAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getPhysicalInterfaceAsHtmlLargePreview_init
        // End of user code

        final PhysicalInterface aPhysicalInterface = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aPhysicalInterface != null) {
            httpServletRequest.setAttribute("aPhysicalInterface", aPhysicalInterface);
            // Start of user code getPhysicalInterfaceAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/physicalinterfacelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("schemas/{schemaId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Schema getSchema(
                @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Schema aSchema = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aSchema != null) {
            // Start of user code getSchema
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aSchema;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("schemas/{schemaId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getSchemaAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getSchemaAsHtml_init
        // End of user code

        final Schema aSchema = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aSchema != null) {
            httpServletRequest.setAttribute("aSchema", aSchema);
            // Start of user code getSchemaAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/schema.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("schemas/{schemaId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getSchemaCompact(
        @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getSchemaCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Schema aSchema = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aSchema != null) {
            final Compact compact = new Compact();

            compact.setAbout(aSchema.getAbout());
            compact.setTitle(aSchema.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aSchema.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aSchema.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("schemas/{schemaId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getSchemaAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getSchemaAsHtmlSmallPreview_init
        // End of user code

        final Schema aSchema = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aSchema != null) {
            httpServletRequest.setAttribute("aSchema", aSchema);
            // Start of user code getSchemaAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/schemasmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("schemas/{schemaId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getSchemaAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getSchemaAsHtmlLargePreview_init
        // End of user code

        final Schema aSchema = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aSchema != null) {
            httpServletRequest.setAttribute("aSchema", aSchema);
            // Start of user code getSchemaAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/schemalargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("thingTypes/{thingTypeId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public ThingType getThingType(
                @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final ThingType aThingType = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aThingType != null) {
            // Start of user code getThingType
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aThingType;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("thingTypes/{thingTypeId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getThingTypeAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getThingTypeAsHtml_init
        // End of user code

        final ThingType aThingType = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aThingType != null) {
            httpServletRequest.setAttribute("aThingType", aThingType);
            // Start of user code getThingTypeAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/thingtype.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("thingTypes/{thingTypeId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getThingTypeCompact(
        @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getThingTypeCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final ThingType aThingType = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aThingType != null) {
            final Compact compact = new Compact();

            compact.setAbout(aThingType.getAbout());
            compact.setTitle(aThingType.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aThingType.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aThingType.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("thingTypes/{thingTypeId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getThingTypeAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getThingTypeAsHtmlSmallPreview_init
        // End of user code

        final ThingType aThingType = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aThingType != null) {
            httpServletRequest.setAttribute("aThingType", aThingType);
            // Start of user code getThingTypeAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/thingtypesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("thingTypes/{thingTypeId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getThingTypeAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getThingTypeAsHtmlLargePreview_init
        // End of user code

        final ThingType aThingType = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aThingType != null) {
            httpServletRequest.setAttribute("aThingType", aThingType);
            // Start of user code getThingTypeAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/thingtypelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @DELETE
    @Path("deviceTypes/{deviceTypeId}")
    public Response deleteDeviceType(
                @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteDeviceType_init
        // End of user code
        final DeviceType aResource = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (aResource != null) {
            // Start of user code deleteDeviceType
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteDeviceType(httpServletRequest, iotId, deviceTypeId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("rules/{ruleId}")
    public Response deleteRule(
                @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteRule_init
        // End of user code
        final Rule aResource = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (aResource != null) {
            // Start of user code deleteRule
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteRule(httpServletRequest, iotId, ruleId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("logicalInterfaces/{logicalInterfaceId}")
    public Response deleteLogicalInterface(
                @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteLogicalInterface_init
        // End of user code
        final LogicalInterface aResource = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (aResource != null) {
            // Start of user code deleteLogicalInterface
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("eventTypes/{eventTypeId}")
    public Response deleteEventType(
                @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteEventType_init
        // End of user code
        final EventType aResource = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (aResource != null) {
            // Start of user code deleteEventType
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteEventType(httpServletRequest, iotId, eventTypeId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("physicalInterfaces/{physicalInterfaceId}")
    public Response deletePhysicalInterface(
                @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deletePhysicalInterface_init
        // End of user code
        final PhysicalInterface aResource = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (aResource != null) {
            // Start of user code deletePhysicalInterface
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deletePhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("schemas/{schemaId}")
    public Response deleteSchema(
                @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteSchema_init
        // End of user code
        final Schema aResource = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (aResource != null) {
            // Start of user code deleteSchema
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteSchema(httpServletRequest, iotId, schemaId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @DELETE
    @Path("thingTypes/{thingTypeId}")
    public Response deleteThingType(
                @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteThingType_init
        // End of user code
        final ThingType aResource = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (aResource != null) {
            // Start of user code deleteThingType
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteThingType(httpServletRequest, iotId, thingTypeId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @PUT
    @Path("deviceTypes/{deviceTypeId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateDeviceType(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("deviceTypeId") final String deviceTypeId ,
            final DeviceType aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateDeviceType_init
        // End of user code
        final DeviceType originalResource = CE4IoTConnectorManager.getDeviceType(httpServletRequest, iotId, deviceTypeId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromDeviceType(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateDeviceType
                    // End of user code
                    final DeviceType updatedResource = CE4IoTConnectorManager.updateDeviceType(httpServletRequest, aResource, iotId, deviceTypeId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromDeviceType(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("rules/{ruleId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateRule(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("ruleId") final String ruleId ,
            final Rule aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateRule_init
        // End of user code
        final Rule originalResource = CE4IoTConnectorManager.getRule(httpServletRequest, iotId, ruleId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromRule(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateRule
                    // End of user code
                    final Rule updatedResource = CE4IoTConnectorManager.updateRule(httpServletRequest, aResource, iotId, ruleId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromRule(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("logicalInterfaces/{logicalInterfaceId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateLogicalInterface(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("logicalInterfaceId") final String logicalInterfaceId ,
            final LogicalInterface aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateLogicalInterface_init
        // End of user code
        final LogicalInterface originalResource = CE4IoTConnectorManager.getLogicalInterface(httpServletRequest, iotId, logicalInterfaceId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromLogicalInterface(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateLogicalInterface
                    // End of user code
                    final LogicalInterface updatedResource = CE4IoTConnectorManager.updateLogicalInterface(httpServletRequest, aResource, iotId, logicalInterfaceId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromLogicalInterface(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("eventTypes/{eventTypeId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateEventType(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("eventTypeId") final String eventTypeId ,
            final EventType aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateEventType_init
        // End of user code
        final EventType originalResource = CE4IoTConnectorManager.getEventType(httpServletRequest, iotId, eventTypeId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromEventType(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateEventType
                    // End of user code
                    final EventType updatedResource = CE4IoTConnectorManager.updateEventType(httpServletRequest, aResource, iotId, eventTypeId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromEventType(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("physicalInterfaces/{physicalInterfaceId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updatePhysicalInterface(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("physicalInterfaceId") final String physicalInterfaceId ,
            final PhysicalInterface aResource
        ) throws IOException, ServletException
    {
        // Start of user code updatePhysicalInterface_init
        // End of user code
        final PhysicalInterface originalResource = CE4IoTConnectorManager.getPhysicalInterface(httpServletRequest, iotId, physicalInterfaceId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromPhysicalInterface(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updatePhysicalInterface
                    // End of user code
                    final PhysicalInterface updatedResource = CE4IoTConnectorManager.updatePhysicalInterface(httpServletRequest, aResource, iotId, physicalInterfaceId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromPhysicalInterface(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("schemas/{schemaId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateSchema(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("schemaId") final String schemaId ,
            final Schema aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateSchema_init
        // End of user code
        final Schema originalResource = CE4IoTConnectorManager.getSchema(httpServletRequest, iotId, schemaId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromSchema(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateSchema
                    // End of user code
                    final Schema updatedResource = CE4IoTConnectorManager.updateSchema(httpServletRequest, aResource, iotId, schemaId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromSchema(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("thingTypes/{thingTypeId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateThingType(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("thingTypeId") final String thingTypeId ,
            final ThingType aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateThingType_init
        // End of user code
        final ThingType originalResource = CE4IoTConnectorManager.getThingType(httpServletRequest, iotId, thingTypeId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromThingType(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateThingType
                    // End of user code
                    final ThingType updatedResource = CE4IoTConnectorManager.updateThingType(httpServletRequest, aResource, iotId, thingTypeId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromThingType(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @GET
    @Path("devices/{typeId}/devices/{deviceId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Device getDevice(
                @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Device aDevice = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aDevice != null) {
            // Start of user code getDevice
            // End of user code
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return aDevice;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("devices/{typeId}/devices/{deviceId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getDeviceAsHtml(
        @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceAsHtml_init
        // End of user code

        final Device aDevice = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aDevice != null) {
            httpServletRequest.setAttribute("aDevice", aDevice);
            // Start of user code getDeviceAsHtml_setAttributes
            // Redirect to the Watson IoT Platform dashboard as best you can for the resource
            try {
                IotpServiceProviderInfo info = IoTAPIImplementation.getIotpServiceProviderInfo(httpServletRequest, iotId);
                String iotDashboardURI = "https://"+iotId+"."+info.platformBase+"/dashboard/#/devices/browse-v2";
                httpServletResponse.sendRedirect(iotDashboardURI);
                return Response.ok().build();
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/device.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("devices/{typeId}/devices/{deviceId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getDeviceCompact(
        @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getDeviceCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Device aDevice = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aDevice != null) {
            final Compact compact = new Compact();

            compact.setAbout(aDevice.getAbout());
            compact.setTitle(aDevice.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aDevice.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aDevice.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("devices/{typeId}/devices/{deviceId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDeviceAsHtmlSmallPreview(
        @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceAsHtmlSmallPreview_init
        // End of user code

        final Device aDevice = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aDevice != null) {
            httpServletRequest.setAttribute("aDevice", aDevice);
            // Start of user code getDeviceAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicesmallpreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("devices/{typeId}/devices/{deviceId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDeviceAsHtmlLargePreview(
        @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDeviceAsHtmlLargePreview_init
        // End of user code

        final Device aDevice = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aDevice != null) {
            httpServletRequest.setAttribute("aDevice", aDevice);
            // Start of user code getDeviceAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ibm/oslc/adaptor/iotp/devicelargepreview.jsp");
            httpServletResponse.addHeader(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @DELETE
    @Path("devices/{typeId}/devices/{deviceId}")
    public Response deleteDevice(
                @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code deleteDevice_init
        // End of user code
        final Device aResource = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (aResource != null) {
            // Start of user code deleteDevice
            // End of user code
            boolean deleted = CE4IoTConnectorManager.deleteDevice(httpServletRequest, iotId, typeId, deviceId);
            if (deleted)
                return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
            else
                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @PUT
    @Path("devices/{typeId}/devices/{deviceId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response updateDevice(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("iotId") final String iotId, @PathParam("typeId") final String typeId, @PathParam("deviceId") final String deviceId ,
            final Device aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateDevice_init
        // End of user code
        final Device originalResource = CE4IoTConnectorManager.getDevice(httpServletRequest, iotId, typeId, deviceId);

        if (originalResource != null) {
            try {
                final String originalETag = CE4IoTConnectorManager.getETagFromDevice(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateDevice
                    // End of user code
                    final Device updatedResource = CE4IoTConnectorManager.updateDevice(httpServletRequest, aResource, iotId, typeId, deviceId);
                    httpServletResponse.setHeader("ETag", CE4IoTConnectorManager.getETagFromDevice(updatedResource));
                    return Response.ok().header(CE4IoTConnectorConstants.HDR_OSLC_VERSION, CE4IoTConnectorConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

}
