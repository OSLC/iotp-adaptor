// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.ibm.oslc.adaptor.iotp.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.DctermsDomainConstants;
import com.ibm.oslc.adaptor.iotp.resources.Oslc_iotDomainConstants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_iotDomainConstants.DEVICEINFO_NAMESPACE)
@OslcName(Oslc_iotDomainConstants.DEVICEINFO_LOCALNAME)
@OslcResourceShape(title = "DeviceInfo Resource Shape", describes = Oslc_iotDomainConstants.DEVICEINFO_TYPE)
public class DeviceInfo
    extends AbstractResource
    implements IDeviceInfo
{
    // Start of user code attributeAnnotation:manufacturer
    // End of user code
    private String manufacturer;
    // Start of user code attributeAnnotation:fwVersion
    // End of user code
    private String fwVersion;
    // Start of user code attributeAnnotation:model
    // End of user code
    private String model;
    // Start of user code attributeAnnotation:serialNumber
    // End of user code
    private String serialNumber;
    // Start of user code attributeAnnotation:deviceClass
    // End of user code
    private String deviceClass;
    // Start of user code attributeAnnotation:descriptiveLocation
    // End of user code
    private String descriptiveLocation;
    // Start of user code attributeAnnotation:hwVersion
    // End of user code
    private String hwVersion;
    // Start of user code attributeAnnotation:description
    // End of user code
    private String description;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public DeviceInfo()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public DeviceInfo(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_iotDomainConstants.DEVICEINFO_PATH,
        DeviceInfo.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local DeviceInfo Resource} - update DeviceInfo.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:manufacturer
    // End of user code
    @OslcName("manufacturer")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "manufacturer")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("manufacturer")
    public String getManufacturer()
    {
        // Start of user code getterInit:manufacturer
        // End of user code
        return manufacturer;
    }
    
    // Start of user code getterAnnotation:fwVersion
    // End of user code
    @OslcName("fwVersion")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "fwVersion")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("fwVersion")
    public String getFwVersion()
    {
        // Start of user code getterInit:fwVersion
        // End of user code
        return fwVersion;
    }
    
    // Start of user code getterAnnotation:model
    // End of user code
    @OslcName("model")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "model")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("model")
    public String getModel()
    {
        // Start of user code getterInit:model
        // End of user code
        return model;
    }
    
    // Start of user code getterAnnotation:serialNumber
    // End of user code
    @OslcName("serialNumber")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "serialNumber")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("serialNumber")
    public String getSerialNumber()
    {
        // Start of user code getterInit:serialNumber
        // End of user code
        return serialNumber;
    }
    
    // Start of user code getterAnnotation:deviceClass
    // End of user code
    @OslcName("deviceClass")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "deviceClass")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("deviceClass")
    public String getDeviceClass()
    {
        // Start of user code getterInit:deviceClass
        // End of user code
        return deviceClass;
    }
    
    // Start of user code getterAnnotation:descriptiveLocation
    // End of user code
    @OslcName("descriptiveLocation")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "descriptiveLocation")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("descriptiveLocation")
    public String getDescriptiveLocation()
    {
        // Start of user code getterInit:descriptiveLocation
        // End of user code
        return descriptiveLocation;
    }
    
    // Start of user code getterAnnotation:hwVersion
    // End of user code
    @OslcName("hwVersion")
    @OslcPropertyDefinition(Oslc_iotDomainConstants.IOT_PLATFORM_NAMSPACE + "hwVersion")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("hwVersion")
    public String getHwVersion()
    {
        // Start of user code getterInit:hwVersion
        // End of user code
        return hwVersion;
    }
    
    // Start of user code getterAnnotation:description
    // End of user code
    @OslcName("description")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "description")
    @OslcDescription("Descriptive text about resource represented as rich text in XHTML content. SHOULD include only content that is valid and suitable inside an XHTML <div> element.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getDescription()
    {
        // Start of user code getterInit:description
        // End of user code
        return description;
    }
    
    
    // Start of user code setterAnnotation:manufacturer
    // End of user code
    public void setManufacturer(final String manufacturer )
    {
        // Start of user code setterInit:manufacturer
        // End of user code
        this.manufacturer = manufacturer;
    
        // Start of user code setterFinalize:manufacturer
        // End of user code
    }
    
    // Start of user code setterAnnotation:fwVersion
    // End of user code
    public void setFwVersion(final String fwVersion )
    {
        // Start of user code setterInit:fwVersion
        // End of user code
        this.fwVersion = fwVersion;
    
        // Start of user code setterFinalize:fwVersion
        // End of user code
    }
    
    // Start of user code setterAnnotation:model
    // End of user code
    public void setModel(final String model )
    {
        // Start of user code setterInit:model
        // End of user code
        this.model = model;
    
        // Start of user code setterFinalize:model
        // End of user code
    }
    
    // Start of user code setterAnnotation:serialNumber
    // End of user code
    public void setSerialNumber(final String serialNumber )
    {
        // Start of user code setterInit:serialNumber
        // End of user code
        this.serialNumber = serialNumber;
    
        // Start of user code setterFinalize:serialNumber
        // End of user code
    }
    
    // Start of user code setterAnnotation:deviceClass
    // End of user code
    public void setDeviceClass(final String deviceClass )
    {
        // Start of user code setterInit:deviceClass
        // End of user code
        this.deviceClass = deviceClass;
    
        // Start of user code setterFinalize:deviceClass
        // End of user code
    }
    
    // Start of user code setterAnnotation:descriptiveLocation
    // End of user code
    public void setDescriptiveLocation(final String descriptiveLocation )
    {
        // Start of user code setterInit:descriptiveLocation
        // End of user code
        this.descriptiveLocation = descriptiveLocation;
    
        // Start of user code setterFinalize:descriptiveLocation
        // End of user code
    }
    
    // Start of user code setterAnnotation:hwVersion
    // End of user code
    public void setHwVersion(final String hwVersion )
    {
        // Start of user code setterInit:hwVersion
        // End of user code
        this.hwVersion = hwVersion;
    
        // Start of user code setterFinalize:hwVersion
        // End of user code
    }
    
    // Start of user code setterAnnotation:description
    // End of user code
    public void setDescription(final String description )
    {
        // Start of user code setterInit:description
        // End of user code
        this.description = description;
    
        // Start of user code setterFinalize:description
        // End of user code
    }
    
    
    static public String manufacturerToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:manufacturerToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"manufacturer\">manufacturer: </LABEL>";
    
        // Start of user code "Mid:manufacturerToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"manufacturer\" type=\"text\" style=\"width: 400px\" id=\"manufacturer\" >";
        // Start of user code "Finalize:manufacturerToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String fwVersionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:fwVersionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"fwVersion\">fwVersion: </LABEL>";
    
        // Start of user code "Mid:fwVersionToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"fwVersion\" type=\"text\" style=\"width: 400px\" id=\"fwVersion\" >";
        // Start of user code "Finalize:fwVersionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String modelToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:modelToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"model\">model: </LABEL>";
    
        // Start of user code "Mid:modelToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"model\" type=\"text\" style=\"width: 400px\" id=\"model\" >";
        // Start of user code "Finalize:modelToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String serialNumberToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:serialNumberToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"serialNumber\">serialNumber: </LABEL>";
    
        // Start of user code "Mid:serialNumberToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"serialNumber\" type=\"text\" style=\"width: 400px\" id=\"serialNumber\" >";
        // Start of user code "Finalize:serialNumberToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String deviceClassToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:deviceClassToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"deviceClass\">deviceClass: </LABEL>";
    
        // Start of user code "Mid:deviceClassToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"deviceClass\" type=\"text\" style=\"width: 400px\" id=\"deviceClass\" >";
        // Start of user code "Finalize:deviceClassToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String descriptiveLocationToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:descriptiveLocationToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"descriptiveLocation\">descriptiveLocation: </LABEL>";
    
        // Start of user code "Mid:descriptiveLocationToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"descriptiveLocation\" type=\"text\" style=\"width: 400px\" id=\"descriptiveLocation\" >";
        // Start of user code "Finalize:descriptiveLocationToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String hwVersionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:hwVersionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"hwVersion\">hwVersion: </LABEL>";
    
        // Start of user code "Mid:hwVersionToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"hwVersion\" type=\"text\" style=\"width: 400px\" id=\"hwVersion\" >";
        // Start of user code "Finalize:hwVersionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String descriptionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:descriptionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"description\">description: </LABEL>";
    
        // Start of user code "Mid:descriptionToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"description\" type=\"text\" style=\"width: 400px\" id=\"description\" >";
        // Start of user code "Finalize:descriptionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String manufacturerToHtml()
    {
        String s = "";
    
        // Start of user code manufacturertoHtml_mid
        // End of user code
    
        try {
            if (manufacturer == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + manufacturer.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code manufacturertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String fwVersionToHtml()
    {
        String s = "";
    
        // Start of user code fwVersiontoHtml_mid
        // End of user code
    
        try {
            if (fwVersion == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + fwVersion.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code fwVersiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String modelToHtml()
    {
        String s = "";
    
        // Start of user code modeltoHtml_mid
        // End of user code
    
        try {
            if (model == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + model.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code modeltoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String serialNumberToHtml()
    {
        String s = "";
    
        // Start of user code serialNumbertoHtml_mid
        // End of user code
    
        try {
            if (serialNumber == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + serialNumber.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code serialNumbertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String deviceClassToHtml()
    {
        String s = "";
    
        // Start of user code deviceClasstoHtml_mid
        // End of user code
    
        try {
            if (deviceClass == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + deviceClass.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code deviceClasstoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String descriptiveLocationToHtml()
    {
        String s = "";
    
        // Start of user code descriptiveLocationtoHtml_mid
        // End of user code
    
        try {
            if (descriptiveLocation == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + descriptiveLocation.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code descriptiveLocationtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String hwVersionToHtml()
    {
        String s = "";
    
        // Start of user code hwVersiontoHtml_mid
        // End of user code
    
        try {
            if (hwVersion == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + hwVersion.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code hwVersiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String descriptionToHtml()
    {
        String s = "";
    
        // Start of user code descriptiontoHtml_mid
        // End of user code
    
        try {
            if (description == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + description.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code descriptiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
